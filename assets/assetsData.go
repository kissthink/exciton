package assets

import (
	"time"

	"github.com/jessevdk/go-assets"
)

var _assetsData0288a6d4746eeeb2ae655bb8828f58908ef8ae3d = "<!DOCTYPE html>\n<html lang=\"{{if .Lang}}{{.Lang}}{{else}}en{{end}}\">\n<head>\n    {{if .IsIE}}<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta charset=\"UTF-8\">\n    <script>\n        (function () {\n            window.exciton = { ID: \"{{.ID}}\" };\n            //pollyfill CustomEvent\n            if ( typeof window.CustomEvent === \"function\" ) return false;\n            function CustomEvent( event, params ) {\n                params = params || { bubbles: false, cancelable: false, detail: undefined };\n                var evt = document.createEvent( 'CustomEvent' );\n                evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n                return evt;\n            }\n            CustomEvent.prototype = window.Event.prototype;\n            //pollyfill string.startsWith\n            window.CustomEvent = CustomEvent;\n            if (!String.prototype.startsWith) {\n                String.prototype.startsWith = function(searchString, position) {\n                    position = position || 0;\n                    return this.indexOf(searchString, position) === position;\n                };\n            }\n        })();    \n    </script>{{end}}\n    <style media=\"all\" type=\"text/css\">\n        html {\n            height: 100%;\n            width: 100%;\n            margin: 0;\n        }\n\n        body {\n            height: 100%;\n            width: 100%;\n            margin: 0;\n            font-family: \"Helvetica Neue\", \"Segoe UI\";\n        }\n    </style>\n    {{range .CSS}}<link type=\"text/css\" rel=\"stylesheet\" href=\"/resources/css/{{.}}\" />{{end}}\n    {{if .IsReleaseBuild}}{{range .ComponentCSSFiles}}<link type=\"text/css\" rel=\"stylesheet\" href=\"{{.}}\" />{{end}}{{else}}{{range .ComponentCSS}}<style type=\"text/css\">{{.}}</style>{{end}}{{end}}\n    <title>{{.Title}}</title>\n</head>\n<body>\n    <div id=\"{{.ID}}\"></div>\n    <script>window.exciton={ID: {{.ID}}, components:{}, callnative: function(a){ {{.NativeRequestJSMethod }}(a);}};</script>\n    <script src=\"/assets/exciton.js\"></script>\n    {{range .JS}}<script src=\"/resources/js/{{.}}\"></script>{{end}}\n    {{if .IsReleaseBuild}}{{range .ComponentJSFiles}}<script src=\"{{.}}\"></script>{{end}}{{else}}{{range .ComponentJS}}<script>{{.}}</script>{{end}}{{end}}\n</body>\n</html>\n"
var _assetsData93230c0b55e1bbb180784ccfda809ad1ec02b78a = "(function(nsobj) {\n'use strict';\nnsobj.system = this;\n\nconst ExcitonEventData = 'exciton-event-data';\n\n// event emitter\nfunction EventEmitter() {\n  const target = document.createDocumentFragment();\n  function delegate(method) {\n    this[method] = target[method].bind(target);\n  }\n  [\n    \"addEventListener\",\n    \"dispatchEvent\",\n    \"removeEventListener\"\n  ].forEach(delegate, this);\n}\n\nfunction translateEvent(e) {\n  // TODO: autogenerate on build time or runtime\n  const tEvent = {\n    super: null,\n    props: [\n      'bubbles', 'cancelBubble', 'cancelable', 'composed', '@currentTarget',\n      'defaultPrevented', 'eventPhase', '@target', 'timeStamp', 'type',\n      'isTrusted'\n    ]\n  };\n  const tUIEvent = {super: tEvent, props: ['detail', '@view']};\n  const tBeforeUnloadEvent = {super: tEvent, props: []};\n  const tMouseEvent = {\n    super: tUIEvent,\n    props: [\n      'altKey', 'button', 'buttons', 'clientX', 'clientY', 'ctrlKey', 'metaKey',\n      'movementX', 'movementY', 'region', '@relatedTarget', 'screenX',\n      'screenY', 'shiftKey'\n    ]\n  };\n  const tPopStateEvent = {super: tEvent, props: []};\n  const tWheelEvent = {\n    super: tMouseEvent,\n    props: ['deltaX', 'deltaY', 'deltaZ', 'deltaMode']\n  };\n  const tPageTransitionEvent = {super: tEvent, props: ['persisted']};\n  const tProgressEvent = {\n    super: tEvent,\n    props: ['lengthComputable', 'loaded', 'total']\n  };\n  const tKeyboardEvent = {\n    super: tUIEvent,\n    props: [\n      'altKey', 'code', 'ctrlKey', 'isComposing', 'key', 'locale', 'location',\n      'metaKey', 'repeat', 'shiftKey'\n    ]\n  };\n  const tFocusEvent = {super: tUIEvent, props: ['@relatedTarget']};\n  const tCompositionEvent = {super: tUIEvent, props: ['data', 'locale']};\n  const tDragEvent = {super: tMouseEvent, props: [/*'dataTransfer'*/]};\n  const tHashChangeEvent = {\n    super: null,\n    props: ['@target', 'type', 'bubbles', 'cancelable', 'oldURL', 'newURL']\n  };\n  const tOfflineAudioCompletionEvent = {\n    super: tEvent,\n    props: [/*'renderedBuffer'*/]\n  };\n\n  const nEvents = [\n    {\n      type: tEvent,\n      events: [\n        'afterprint',     'beforeprint',\n        'canplay',        'canplaythrough',\n        'durationchange', 'languagechange',\n        'loadeddata',     'loadedmetadata',\n        'noupdate',       'cached',\n        'change',         'checking',\n        'reset',          'DOMContentLoaded',\n        'downloading',    'emptied',\n        'ended',          'error',\n        'input',          'invalid',\n        'obsolete',       'offline',\n        'online',         'pause',\n        'play',           'playing',\n        'seeked',         'seeking',\n        'stalled',        'submit',\n        'suspend',        'waiting',\n        'ratechange',     'readystatechange',\n        'selectstart',    'selectionchange',\n        'timeupdate',     'updateready',\n        'volumechange'\n      ]\n    },\n    {\n      type: tMouseEvent,\n      events: [\n        'contextmenu', 'dblclick', 'mousedown', 'mouseenter', 'mouseleave',\n        'mousemove', 'mouseout', 'mouseover', 'mouseup', 'click', 'show'\n      ]\n    },\n    {\n      type: tWheelEvent,\n      events: ['wheel']\n\n    },\n    {\n      type: tKeyboardEvent,\n      events: ['keydown', 'keypress', 'keyup']\n\n    },\n    {\n      type: tCompositionEvent,\n      events: ['compositionend', 'compositionstart', 'compositionupdate']\n    },\n    {type: tFocusEvent, events: ['focusin', 'focusout', 'blur', 'focus']}, {\n      type: tProgressEvent,\n      events: ['progress']\n\n    },\n    {type: tBeforeUnloadEvent, events: ['beforeunload']}, {\n      type: tUIEvent,\n      events: ['abort', 'load', 'resize', 'scroll', 'select', 'unload']\n    },\n    {\n      type: tDragEvent,\n      events: [\n        'dragend', 'dragenter', 'dragleave', 'dragover', 'dragstart', 'drag',\n        'drop'\n      ]\n    },\n    {type: tHashChangeEvent, events: ['hashchange']},\n    {type: tOfflineAudioCompletionEvent, events: ['complete']},\n    {type: tPageTransitionEvent, events: ['pagehide', 'pageshow']},\n    {type: tPopStateEvent, events: ['popstate']}\n  ];\n\n  const eventType = e.type;\n  for (let nei = 0; nei < nEvents.length; nei++) {\n    const ne = nEvents[nei];\n    for (let eti = 0; eti < ne.events.length; eti++) {\n      const et = ne.events[eti];\n      if (et == eventType) {\n        const result = {};\n        let eot = ne.type;\n        while (eot != null) {\n          for (let pi = 0; pi < eot.props.length; pi++) {\n            const p = eot.props[pi];\n            if (p.startsWith('@')) {\n              const rp = p.substr(1);\n              const pv = e[rp];\n              if ((typeof pv) !== 'undefined' && pv != null) {\n                // console.log(rp, pv);\n                if (rp === 'view') {\n                  result[rp] = { windowId: pv.exciton.ID }\n                } else {\n                  result[rp] = {\n                    windowId: pv.ownerDocument.defaultView.exciton.ID,\n                    elementId: pv.dataset['excitonId']\n                  };\n                }\n                // console.log(\"==>\", result[p]);\n              }\n            } else {\n              const pv = e[p];\n              if ((typeof pv) !== 'undefined') {\n                result[p] = pv;\n              }\n            }\n          }\n          eot = eot.super;\n        }\n        return result;\n      }\n    }\n  }\n  return {};\n}\n\nfunction callNativeMethod(method, arg) {\n  nsobj.callnative({path: '/window/' + nsobj.ID + '/' + method, arg: JSON.stringify(arg)});\n}\n\nconst exciton = new EventEmitter();\n\nexciton.addEventListener('requestAnimationFrame', function(e) {\n  const timestamp = e.detail;\n  window.requestAnimationFrame(function(timestamp) {\n    callNativeMethod('onRequestAnimationFrame', timestamp);\n  });\n}, false);\n\nconst ditNone = 0;\nconst ditCreateNode = 1;\nconst ditCreateNodeWithNS = 2;\nconst ditCreateTextNode = 3;\nconst ditSelectCurNode = 4;\nconst ditSelectArg1Node = 5;\nconst ditSelectArg2Node = 6;\nconst ditPropertyValue = 7;\nconst ditDelProperty = 8;\nconst ditAttributeValue = 9;\nconst ditDelAttributeValue = 10;\nconst ditAddClassList = 11;\nconst ditDelClassList = 12;\nconst ditAddDataSet = 13;\nconst ditDelDataSet = 14;\nconst ditAddStyle = 15;\nconst ditDelStyle = 16;\nconst ditNodeValue = 17;\nconst ditInnerHTML = 18;\nconst ditAppendChild = 19;\nconst ditInsertBefore = 20;\nconst ditRemoveChild = 21;\nconst ditReplaceNode = 22;\nconst ditAddEventListener = 23;\nconst ditRemoveEventListener = 24;\nconst ditSetRootItem = 25;\nconst ditNodeUUID = 26;\n\nfunction resolvePathNode(root, items) {\n  let ret = root;\n  for (let i = 0; i < items.length; i++) {\n    ret = ret.childNodes[items[i]];\n  }\n  return ret;\n}\n\nfunction addEventCallback(n, name, itemv) {\n  const id = itemv.id;\n  const pd = itemv.pd;\n  const sp = itemv.sp;\n  if (n[ExcitonEventData] === undefined) {\n    n[ExcitonEventData] = {}\n  }\n  const f = function(e) {\n    if (pd) {\n      e.preventDefault();\n    }\n    if (sp) {\n      e.stopPropagation();\n    }\n    const goevent = translateEvent(e);\n    if (e.target) {\n      console.log('dataset:', e.target.dataset);\n    }\n    console.log('called', goevent);\n    callNativeMethod('html/' + id + '/' + name, goevent);\n  };\n  n.addEventListener(name, f);\n  n[ExcitonEventData][name] = f;\n}\n\nfunction removeEventCallback(n, name) {\n  const m = n[ExcitonEventData];\n  if (m !== undefined) {\n    const f = m[name];\n    delete m[name];\n    n.removeEventListenr(name, f);\n  }\n}\n\nexciton.addEventListener('updateDiffData', function(e) {\n  const rootObj = document.getElementById(nsobj.ID);\n  const diff = e.detail;\n  let curNode = null;\n  let arg1Node = null;\n  let arg2Node = null;\n  let creNodes = [];\n  for (let ii = 0; ii < diff.items.length; ii++) {\n    const item = diff.items[ii];\n    switch (item.t) {\n      case ditCreateNode:\n        curNode = document.createElement(item.v);\n        creNodes.push(curNode);\n        break;\n      case ditCreateNodeWithNS:\n        curNode = document.createElementNS(item.k, item.v);\n        creNodes.push(curNode);\n        break;\n      case ditCreateTextNode:\n        curNode = document.createTextNode(item.v);\n        creNodes.push(curNode);\n        break;\n      case ditSelectCurNode:\n        if (item.v === null || item.v === undefined) {\n          curNode = rootObj;\n        } else if (typeof(item.v) === 'number') {\n          curNode = creNodes[item.v];\n        } else {\n          curNode = resolvePathNode(rootObj, item.v);\n        }\n        break;\n      case ditSelectArg1Node:\n        if (item.v === null || item.v === undefined) {\n          arg1Node = rootObj;\n        } else if (typeof(item.v) === 'number') {\n          arg1Node = creNodes[item.v];\n        } else {\n          arg1Node = resolvePathNode(rootObj, item.v);\n        }\n        break;\n      case ditSelectArg2Node:\n        if (item.v === null || item.v === undefined) {\n          arg2Node = rootObj;\n        } if (typeof(item.v) === 'number') {\n          arg2Node = creNodes[item.v];\n        } else {\n          arg2Node = resolvePathNode(rootObj, item.v);\n        }\n        break;\n      case ditPropertyValue:\n        curNode[item.k] = item.v;\n        break;\n      case ditDelProperty:\n        delete curNode[item.v];\n        break;\n      case ditAttributeValue:\n        curNode.setAttribute(item.k, item.v);\n        break;\n      case ditDelAttributeValue:\n        curNode.removeAttribute(item.v);\n        break;\n      case ditAddClassList:\n        curNode.classList.add(item.v);\n        break;\n      case ditDelClassList:\n        curNode.classList.remove(item.v);\n        break;\n      case ditAddDataSet:\n        if (!curNode.dataset) {\n          curNode.dataset = {};\n        }\n        curNode.dataset[item.k] = item.v;\n        break;\n      case ditDelDataSet:\n        delete curNode.dataset[item.v];\n        break;\n      case ditAddStyle:\n        curNode.style.setProperty(item.k, item.v);\n        break;\n      case ditDelStyle:\n        curNode.style.removeProperty(item.v);\n        break;\n      case ditNodeValue:\n        curNode.nodeValue = item.v;\n        break;\n      case ditInnerHTML:\n        curNode.innerHTML = item.v;\n        break;\n      case ditAppendChild:\n        curNode.appendChild(arg1Node);\n        break;\n      case ditInsertBefore:\n        curNode.insertBefore(arg1Node, arg2Node);\n        break;\n      case ditRemoveChild:\n        curNode.removeChild(arg1Node);\n        break;\n      case ditReplaceNode:\n        curNode.replaceChild(arg1Node, arg2Node);\n        break;\n      case ditAddEventListener:\n        addEventCallback(curNode, item.k, item.v);\n        break;\n      case ditRemoveEventListener:\n        curNode.removeEventCallback(curNode, item.v);\n        break;\n      case ditSetRootItem:\n        // TODO:\n        //document.body = curNode;\n        break;\n      case ditNodeUUID:\n        if (!curNode.dataset) {\n          curNode.dataset = {};\n        }\n        curNode.dataset['excitonId'] = item.v;\n        break;\n      default:\n        console.log('invalid type', item.t);\n        break;\n    }\n  }\n  console.log('updateDiffData', diff)\n}, false);\n\nnsobj.requestBrowserEvent = function(method, jsonArg) {\n  // console.log('jsonArg', jsonArg);\n  const arg = JSON.parse(jsonArg);\n  const e = new CustomEvent(method, {detail: arg});\n  exciton.dispatchEvent(e);\n};\n\nnsobj.requestBrowerEventSync = function(method, jsonArg) {\n  const arg = JSON.parse(jsonArg);\n  console.log('requestBrowerEventSync', arg);\n  switch (arg.cmd) {\n    case 'getProp':\n      const elem =\n          document.querySelector('[data-exciton-id=\"' + arg.elemId + '\"]');\n      if (elem == null) {\n        throw new Error('invalid target: ' + arg.elemId);\n      }\n      return JSON.stringify(elem[arg.propName]);\n    default:\n      throw new Error('invalid command: ' + arg.cmd);\n  }\n};\n\ncallNativeMethod('ready', null);\n})(window.exciton)"

// assetsData returns go-assets FileSystem
var assetsData = assets.NewFileSystem(map[string][]string{"/": []string{"default.gohtml", "exciton.js"}}, map[string]*assets.File{
	"/": &assets.File{
		Path:     "/",
		FileMode: 0x800001ed,
		Mtime:    time.Unix(1526703936, 1526703936000000000),
		Data:     nil,
	}, "/default.gohtml": &assets.File{
		Path:     "/default.gohtml",
		FileMode: 0x1a4,
		Mtime:    time.Unix(1526704112, 1526704112000000000),
		Data:     []byte(_assetsData0288a6d4746eeeb2ae655bb8828f58908ef8ae3d),
	}, "/exciton.js": &assets.File{
		Path:     "/exciton.js",
		FileMode: 0x1a4,
		Mtime:    time.Unix(1526701381, 1526701381000000000),
		Data:     []byte(_assetsData93230c0b55e1bbb180784ccfda809ad1ec02b78a),
	}}, "")
