// Code generated by go-bindata.
// sources:
// assets/default.gohtml
// assets/exciton.js
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDefaultGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x5f\x6f\xe3\x36\x0c\x7f\xef\xa7\xe0\x09\x18\x2e\x01\x12\xbb\x7b\x1b\x92\xa8\xc0\xd0\x76\x58\x8a\xfb\x33\x34\x2d\xb6\x3d\x2a\x36\x1d\x6b\x27\x4b\x3e\x89\xf6\xb5\x70\xf5\xdd\x07\xc5\x7f\x6a\xa7\xe9\xde\xa6\x17\xd3\x22\xf9\x23\xf5\x23\x45\x6d\x3e\xdc\x7c\xbd\x7e\xf8\xfb\x8f\x5b\xc8\xa9\x50\x57\x17\x9b\xf0\x01\x25\xf4\x81\xb3\xa6\x91\x19\x44\x9f\x84\x3e\x78\xdf\x34\x83\x80\xca\xa1\xf7\xa8\x9b\x06\x75\xea\x3d\x0b\x4e\x28\xd2\xab\x0b\x00\x80\xd6\x67\xeb\xb6\xb7\xde\x6f\x0a\x24\x01\x39\x51\xb9\xc4\xef\x95\xac\x39\xfb\x6b\xf9\xf8\xeb\xf2\xda\x14\xa5\x20\xb9\x57\xc8\x20\x31\x9a\x50\x13\x67\xdb\x5b\x8e\xe9\x01\x59\x8b\xd2\x7a\x26\xb9\xb0\x0e\x89\xb3\xc7\x87\xdf\x96\xbf\xf4\xaa\xbd\x70\x08\xb9\xc5\x2c\x24\x18\xdd\xa3\x33\x95\x4d\xd0\x3d\xde\x7f\x3a\xe6\x72\xb4\x71\x89\x95\x25\xb5\x3f\x61\xcd\xb2\x4a\x27\x24\x8d\x86\xd9\x1c\x9a\x61\x3b\xac\x1f\x52\xa7\xe6\x47\x84\x4f\x89\x24\xa3\x81\x43\x03\xdb\x9b\x15\x04\xec\xed\x8d\xf7\x0c\xfc\x7a\x62\x1f\xc7\xa5\x51\xea\x39\x93\x4a\xc1\x75\xe5\xc8\x14\xb7\x35\x6a\x9a\xd8\xc8\x0c\x66\x40\xcf\x25\x9a\xac\xc7\x1f\x99\x02\xe7\x1c\x58\x9f\x11\x83\x39\x58\xa4\xca\x6a\xc8\x84\x72\x38\x8d\x36\xe4\x3d\xf2\x9f\x01\x86\xcf\x02\x4a\x61\x45\xe1\xe0\xf4\x44\x61\x75\x2a\xde\x0b\x2f\x2f\xd0\xc0\xbe\xda\xef\x15\xba\x55\x1b\x68\x01\x89\xd0\x09\x2a\xb1\x57\x38\x6c\xa5\x48\x42\xaa\x15\x54\x3a\xc5\x4c\x6a\x4c\x4f\x8f\x1f\x56\x2d\x2c\x60\x4d\xc0\x21\x35\x49\x55\xa0\xa6\x28\xb1\x28\x08\xbb\xf4\x3e\x8e\x92\xfd\x08\xf3\xb7\x00\x58\x53\x24\xb5\xa4\xf7\x0f\x15\x75\xb9\x0e\xff\xaf\xb9\x0e\x5b\x6d\xae\xe7\xf0\x3b\x3e\xb1\xa6\xa9\xce\x4f\xfe\x46\xd1\xa3\xd2\x1a\x32\xa1\x62\xc0\xfb\x8a\x9d\x28\xde\xef\x02\x47\x56\xea\x43\xe4\x48\x58\x72\x7f\x4a\xca\xcf\xf5\xd7\xa4\xfe\xe3\xd0\xeb\x37\x9d\xf3\x61\xd7\x02\x0e\xa1\x47\xd0\xe7\x6a\xfd\x1f\xe6\xc0\x87\x0e\x9a\x39\x14\x36\xc9\x5b\xe3\x05\x94\xc6\xc9\xb0\x7d\x0e\xf0\xd8\x40\x9d\x3e\xb4\x50\x2f\xbe\xbc\xc0\xe5\x5b\xb2\x47\x84\x53\x2e\x5d\x24\x75\x8a\x4f\x5f\xb3\x77\xe3\x85\xee\xef\xff\xde\xa2\xf9\xf7\x2a\xe6\xe7\xb3\xf9\x3a\x08\xed\x0d\x8f\xbb\x2b\xde\x0d\xa1\xee\xda\xd3\xb3\x42\x28\x30\x95\x82\x33\xa1\x14\x3b\x5e\x42\xce\x08\x9f\x28\x4e\x9c\x63\xaf\x13\xe1\x38\xe6\xa6\x47\xcf\x51\x1e\x72\x5a\xc1\xcf\x97\x97\x3f\xad\x4f\x6a\x98\x52\x7e\x4e\x51\x08\x7b\x90\x7a\x35\xa6\xc5\x5f\x0c\xe2\xde\xa4\xcf\xff\x4b\x8c\xb0\x32\xa3\x69\x99\x89\x42\xaa\xe7\x15\xb0\xdf\x51\xd5\x48\x32\x11\xf0\x05\x2b\x64\x0b\x60\x3b\x3c\x18\x84\xc7\x2d\x1b\xa7\xd6\x51\x17\x68\xea\xc7\xb5\x15\xfa\x80\x10\x5d\xef\x76\xde\x6f\x94\xd4\xdf\x4e\x39\x03\x8b\x8a\xb3\xa3\x8f\xcb\x11\x89\x75\xc3\x37\x71\x2e\x6e\x9a\x28\x8c\xc8\x78\x52\x86\x57\x4c\x53\x94\x46\xa3\xa6\x16\xbc\x0d\x7b\x74\xe9\x73\x98\x54\x8f\x24\xb5\xfa\x87\x20\x04\xa3\x76\xe7\x62\x13\xb7\xef\xcb\x26\x10\xda\x4d\xf8\x54\xd6\x20\x53\xce\x44\x59\x32\x48\x05\x89\x65\x51\x59\x65\xbe\x2d\xad\x31\xc4\x87\xe9\x7d\xb5\x89\x53\x59\x4f\x5f\x85\xe9\xc4\xe7\x4d\x18\xf7\x9d\xfd\x02\x92\x3e\x67\xb7\x6a\xbc\x5f\x07\xc5\x67\x74\x46\xdf\xed\xc0\xfb\x59\xeb\xba\x38\x79\x34\x16\xaf\x97\x4c\xcc\x9b\xe0\xf2\x45\x90\xac\xf1\x1e\xbf\x57\xe8\xe8\x6e\xf7\x19\x29\x37\x69\x00\x10\xf3\x35\xf8\xf9\x7a\x68\xdf\x29\x61\x77\x47\x9a\x8e\x1a\x70\x36\xe1\xec\x9f\x9e\xe2\xab\xb3\x0d\xff\x96\xe9\x11\xc2\xc0\xf4\xd4\x6f\x13\xb7\x2c\x6e\xe2\xf6\xc1\xff\x37\x00\x00\xff\xff\x5f\x6c\xd8\x30\x01\x08\x00\x00")

func assetsDefaultGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsDefaultGohtml,
		"assets/default.gohtml",
	)
}

func assetsDefaultGohtml() (*asset, error) {
	bytes, err := assetsDefaultGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/default.gohtml", size: 2049, mode: os.FileMode(420), modTime: time.Unix(1521500379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsExcitonJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\xdb\x77\xdb\x36\x93\x7f\xd7\x5f\x81\xfa\xa1\x94\x1b\x55\x6e\xdc\xcb\x6e\xad\x6a\x4f\x12\x3b\x3d\xf5\xb6\xb9\x9c\xd8\xee\x65\x75\xf4\x00\x91\x23\x09\x35\x49\xa0\x00\x28\x55\x9b\xea\x7f\xff\xce\xe0\x42\x02\x24\x6d\x29\x5f\xf3\xd5\x2f\x06\x07\x83\xdf\x5c\x38\xc0\x0c\x86\x1a\x2e\xab\x32\xd5\x8c\x97\xc3\x55\xce\x17\x34\x1f\x91\x52\xf1\xc5\xef\x23\x92\xd2\x3c\x2f\xa9\x66\x1b\x38\x25\xef\x07\x49\xa5\x80\x28\x2d\x59\xaa\x93\xc9\xc0\xb0\x8c\xd5\x4e\x69\x28\xc8\x94\xe8\x35\x53\x93\xc1\x20\xe5\xa5\xd2\xe4\xe5\x9f\x29\xd3\xbc\x7c\xb9\x81\x52\x5f\x51\x4d\xc9\x94\x24\x60\x69\x9f\x03\x12\x3f\xcf\xa8\xa6\xc9\x64\x30\x38\x3b\x23\x86\x40\xa0\x60\x5a\x83\x1c\x78\x55\x88\x59\xfc\xd2\x52\x87\x28\x9e\x10\x0b\xae\xa9\x5c\x81\x26\x53\x92\xf1\xb4\x2a\xa0\xd4\xe3\x54\x02\xd5\x70\xe5\x1e\xbf\x97\x74\x85\xff\x87\xa7\x93\x01\x21\x35\x5e\x06\x39\xac\xa8\x86\x61\x01\x7a\xcd\x33\x8b\x48\x8c\xde\x33\x4b\x9a\xa3\x19\x06\xdc\x13\xc6\x0b\x56\x66\x43\x4b\x33\x68\xfb\x01\x21\x33\xb3\xee\x84\x66\x99\x51\xf1\x27\xa6\x34\x94\x20\x4f\x46\x96\x9e\x31\x25\xa8\x4e\xd7\x66\xd2\x13\x25\x14\x7c\x03\x31\xff\x80\x90\xf9\x78\xc9\xe5\x4b\x9a\xae\x87\x5e\xbb\x91\x51\xe8\x74\x32\xd8\x0f\x1a\x57\x68\x49\x4b\x95\x53\x6d\x01\x86\x60\x75\x3f\x3b\x23\xb7\x6f\xae\xde\x5c\x10\x5a\x69\xbe\x42\x48\xaa\x81\xf0\x92\x2c\x2a\x96\x67\x44\xb3\x02\x08\x97\x44\x56\x25\x0e\x1b\xf7\x19\x10\x32\x75\xf6\xab\x4a\x80\xbc\x20\x65\x95\xe7\x56\x57\x21\xb9\x50\x17\xce\x4a\x42\x92\x45\xb5\x58\xe4\xa0\x92\x11\x49\x52\x5a\xa6\x90\xbf\x30\x84\xe6\x99\xfa\x27\x5e\x08\xae\x20\xc3\xf1\xb3\xb4\x92\x12\x4a\x7d\x6b\x5c\x97\x8c\x3c\x58\x06\x4b\x5a\xe5\xfa\xad\x34\x2f\xdd\xf2\x9a\xe1\xdb\x35\x55\x06\xe5\x99\x76\x4b\x48\x82\x6a\xdf\x68\x5a\x08\xf3\xb0\x13\xd0\xe0\x30\x75\x2b\x2b\x85\x00\x86\x32\xc7\x57\x33\x69\x4c\xbc\xbb\xae\x8d\x74\xf6\x59\xab\x47\xb5\x75\x49\x06\x9a\xb2\xdc\x48\xdc\x30\xd8\x26\xf3\x70\xfd\x0b\x58\x72\x09\x77\x65\xce\x69\x76\x08\x29\x5a\xf8\x8a\x57\x0a\x7a\x1d\xec\x75\xea\x77\x32\xcd\xf5\x8f\xb0\x43\x6d\x16\x95\xd6\xbc\x6c\x46\xd6\xf1\x39\x83\x52\xff\xda\x0c\x7f\x33\x43\x2d\x73\xb7\xaa\x00\x4d\xcd\xd0\x03\x62\xb8\x15\x7e\x8d\x7f\x30\xab\x24\xac\x98\x15\xf0\x4c\x02\x06\x55\x76\x5b\x7b\x5c\xa5\x12\xa0\xfc\xb5\x81\xb1\x04\xb3\x4e\xad\xd9\xd2\x28\xd9\xeb\xf1\xb7\x5c\xdc\x68\x1f\xa1\xc7\x7a\xeb\x97\x35\x40\xde\xef\xad\xc6\x91\xb1\xc3\x92\x0c\x72\x4d\x8d\x55\x66\xf4\x5b\x3d\xfa\xbf\x7a\xf4\x8a\x67\x90\x74\x14\xa4\x2b\xb8\xc5\x7d\xc4\x70\x4b\x1d\x0c\x0f\x01\x52\x31\x13\x60\x91\xc6\x6f\x25\x5f\x49\x50\xaa\x5f\xe9\x3e\x7d\x73\x28\x57\x7a\x7d\xc9\x0b\x51\x69\xbf\x53\x30\xac\x6c\xec\x6b\xae\x69\xde\xd1\xf5\x47\xd8\x2d\x38\x95\xd9\xdf\x0a\xa4\x14\xbd\x10\x47\x09\x53\x97\x66\x8f\xb2\x72\x85\x8f\xf7\x96\x9a\xf3\x94\x7a\xbd\x52\xaa\x4d\x70\xd4\x61\xe4\xe3\x0a\xe3\x46\x00\xd5\x87\x23\xe1\x7b\x9e\x56\xaa\xe3\x5f\xaf\x74\xe3\x98\x56\xf4\x45\x6e\x76\x6a\xf6\xbe\xa9\x2e\x92\xc9\x25\x8d\x21\x11\xd2\x95\xa4\xab\x0e\x44\x10\x5c\x35\xca\xd9\x67\x06\xc7\x84\xc8\x12\x64\xf2\xd9\x59\x84\xf3\x03\x55\xeb\xcb\x35\x2d\x57\xfd\xbb\xbb\x7b\x7c\x46\x07\x99\x39\xbb\x7a\x8e\x52\x1f\x10\x3c\xcf\xee\xde\xfd\x84\xa3\x12\xb6\x38\x6a\x3b\xf5\xcd\x72\x99\xb3\x12\x9e\x57\x19\xe3\xe8\x9c\x1c\x22\xdf\x1c\x8a\xc2\xb3\xcf\x12\x09\x65\x06\x12\xb2\x17\xd5\xd2\x99\x67\x45\xd4\x32\x2c\x9a\x22\x53\x17\x4c\xef\x5d\x0c\xa0\xf2\x31\x2a\xb1\x29\x3b\x08\x3b\x0c\xbc\xa5\x06\x29\x24\x2b\xd1\x62\x9b\x38\xcc\x21\xea\x48\x0d\x63\x4a\x4b\x91\xd3\x9d\xe3\x0a\x28\x7a\x2d\x79\xb5\x5a\x87\xbc\x59\x25\x4d\x40\xa6\xc6\xf3\xe6\x1d\xd3\x72\x55\xd1\x15\x78\x4a\xc3\x6b\x37\x95\x8b\x85\x80\x82\x21\x6c\xa9\x0d\x6f\xc9\x2b\x91\x51\x0d\xb5\x12\x49\x4a\xd3\x35\x6e\xc9\x40\x4f\x2f\x33\xa0\x40\x7a\x6f\xf6\x4e\xc3\x25\x41\x81\x0e\x98\x48\x72\xf5\xe6\xd5\x25\x2f\x35\x66\x7a\xb7\xcd\x03\x7b\xf8\xd6\xe4\x14\xbb\x01\x91\x02\x85\xd0\x2c\x66\xc2\x17\x95\x45\x90\x20\x25\x97\x21\x0b\x2b\x45\x15\x4b\x65\xe5\x86\xe6\x2c\xc2\xe1\x0b\xc5\x73\x08\x8d\xe4\x36\x8a\x22\xa6\xd2\x52\x1a\x24\x41\x2b\x15\xb1\xc4\x6f\xcb\x53\x5a\x7e\x50\x00\xf7\x91\xd6\x86\xd2\x66\xd2\x34\xcf\x43\xae\x44\x55\x8b\x82\x45\xe1\xa1\x2a\x25\xa0\x0c\x79\xb6\x94\xe9\xb6\xd7\xa9\x86\xe8\xfd\x24\x12\x68\xb6\x53\x3a\xa0\x87\xba\xe5\x90\x6a\xa5\xa9\x74\x3e\x73\x94\x20\xb0\x1a\x66\x2c\x3a\xa2\xe0\x48\xec\x93\x11\x10\x32\x6e\x78\x5e\x15\x5e\x9a\x23\xcf\xcd\xff\xfd\xa8\x6f\x03\xb5\x33\x5a\xef\x2e\x4a\x31\x72\xfe\xd4\x05\x94\x95\x49\x67\x8b\x3c\xcd\x59\x7a\x6f\x93\x78\xa5\x00\x03\xa8\x7e\xc0\x0a\x4a\xd6\x4f\x39\xd0\x4d\x64\x89\xa1\x62\xea\xaf\x59\xb8\x09\x1a\x37\xde\x04\x6b\x2b\xe1\x4a\x0b\x2b\x4a\xad\xf9\xf6\x18\x93\x9a\xfc\xdd\x31\x29\xd9\xe2\x5c\x32\x1f\x3c\xb2\x3c\x4a\x73\x5d\x84\x7b\xd8\x79\x73\xef\x61\x27\x30\xed\xba\x71\x25\x1e\x07\x6e\xa7\x8f\x2e\x76\xda\x70\xd8\x60\x0b\x29\x3e\x52\x42\x9a\x0b\x89\xd8\x1b\x4e\x5c\x93\xf1\x46\x81\x88\x25\x52\x99\x51\xdf\x0c\x9d\xf3\x17\x79\x25\x6b\x5a\x32\xdf\x8f\xda\xca\x47\x25\x46\x57\x73\xe1\xa6\xdb\x1e\x70\xab\x3b\x95\x6b\xa8\x92\x3d\x91\x2b\x33\xd9\x27\x3a\xaa\x2c\x42\xa1\x74\xc1\xad\x47\xcc\x4a\x53\x0c\x28\xf6\xff\xe0\x4a\x46\x9e\x9b\x3a\xda\x6e\x2a\x1c\x79\x09\x8f\xbc\xa2\x3a\x2f\x3f\xb2\x19\x32\x49\x57\xee\xed\xd8\xa1\x0b\x77\x7c\x70\xd1\x6e\x1f\x7c\x2c\xe3\xb8\x7e\x79\xf8\x10\x9d\xbd\x92\x8b\xfe\xa0\x76\x2a\xb5\x52\x7c\xe8\xb8\x35\x55\x6b\xb7\xd3\xe7\xad\x55\x8f\x64\xe6\x51\x2b\xe0\xcc\x61\xdc\x5e\xdf\x53\x97\x86\xeb\x04\x5d\xc1\x9a\xd9\x4a\x0e\xc7\x66\x6b\x76\x30\xc2\xe2\x3b\x5a\xcd\x85\x39\x13\x93\x39\x5e\x5c\xe7\x41\xb6\x37\x3c\xb7\x3b\x01\x64\x4a\x60\x8c\x38\xe6\xb2\xcc\x25\x19\xe6\xa0\x49\x09\x8c\x4c\xc9\x17\x13\x33\xf8\xce\xd7\x06\x63\x5b\xcc\x1a\xea\x93\x27\xfe\x06\xed\xca\x07\x44\x72\x7c\xb3\x12\xd8\x7c\x62\x26\x6b\x44\xd0\x0e\x11\x07\xdf\x91\x12\xc6\x10\x63\x82\x0e\x30\x6b\x35\xb1\xbc\xa9\x79\x67\xa0\x3d\x2e\x21\x6c\x49\x86\x38\x3d\x6d\x6c\x69\x56\xfb\xf5\x12\x54\x95\x9b\x12\x69\x3f\xa9\xa7\x8c\x3a\xdc\x21\x7b\xd3\xed\xdf\x76\xcd\x72\x20\x43\x9c\xfd\x64\x6a\xaa\xba\x10\x33\x30\x47\x38\x6b\x04\x1a\x03\x5c\x8f\x4d\xa9\x55\x1b\x23\x22\x5b\x42\x8d\x04\x3a\xdc\xf3\xcf\x44\x63\x4f\x63\x95\x18\x9b\x20\x56\xbf\x30\xbd\x1e\x26\xcf\x92\xd3\x36\x52\x6d\x1d\x82\x89\xb1\xaa\x16\x4a\xcb\xe1\xd3\xd3\x49\x2f\x97\xd8\xa0\xc8\x99\x14\xf3\xf6\x3c\x0a\x1b\xa2\x03\xf8\x92\x88\xcd\x29\xf9\x64\x3a\xc5\xcd\x9b\xc1\x92\x95\x90\x25\xe4\xd3\x4f\x71\x71\xaf\x23\xec\xdf\xd9\x99\x91\xc1\x73\x18\xe7\x7c\x35\x94\x62\x84\x38\x6d\x31\x56\x10\x2a\x8b\xf8\xe6\xb6\xdd\x07\x46\xdc\xdb\x42\x4d\xf1\x8d\x91\x2d\x2b\x33\xbe\xbd\xce\x2e\x88\xd8\x8c\x5d\xfb\x68\x7c\x7d\x65\x9a\x30\xf1\xdf\x9e\x40\xae\xe0\x08\xcc\x1e\x06\x12\xcb\xe1\xdb\x12\xa4\x6f\x25\x8d\x5d\xbf\xe2\x67\x06\xdb\x40\x83\x51\x2f\x0c\xe4\xe6\x92\xed\x70\xb0\xe4\x54\xa0\x67\xbe\xef\x75\xed\xcf\xc3\x96\xe6\x5d\x67\x75\xcd\x6b\xb9\xf9\x64\x3a\xfd\x9f\x93\x91\xb7\x4c\xcc\x3b\x0e\x8f\x11\x1e\x70\x4e\x14\x1c\x1f\x1c\x1b\x7d\x2f\xb0\x56\x08\xa3\x72\x73\x40\xa9\x41\xff\xd8\xee\x4b\xdc\x20\xe6\x3a\xd3\x80\x34\x4c\x12\x74\x25\x4b\x27\xcd\x33\xd8\xe9\xbd\x6b\xd1\x39\x16\xdc\xf4\x61\x1f\x2d\xa5\x79\xfe\xda\xb4\x33\x5f\x99\xfe\x9e\x6b\x05\x8e\x08\x95\x2b\xd7\x61\xac\x1b\x9e\xc3\xf7\x82\xea\xf5\x05\x49\xce\x6c\x78\x9c\x25\xe4\x89\x6d\x8b\x62\x08\x3e\x21\x89\x21\x04\x00\x17\xe4\x7f\x6f\xde\xbc\x1e\x2b\x2d\x59\xb9\x62\xcb\xdd\x10\x41\xf7\xb6\x93\xe7\x0e\x33\x1b\x09\xe6\xdc\xd9\xb6\xfa\x9b\x93\xc1\xc0\xc7\x57\xbb\xb1\x38\x4c\x24\xfc\x51\x81\xd2\xcf\x4b\x56\x98\xeb\xd0\xf7\x92\x16\x98\x11\xea\xb6\x2d\x44\xfd\x51\x56\x80\xd2\xb4\x30\x27\xcd\xd8\xf6\xb9\xd0\x4d\xb6\xb7\x3b\xee\x05\x6b\x3a\xc0\xf5\xea\xfa\x78\x6f\x3b\x2d\xe1\xe5\xbb\x07\x14\x6a\x16\x9b\x66\x29\x1a\x3f\x22\x4b\x9a\x2b\x38\xad\x7b\xc3\x19\xd3\xaf\xb9\xc9\x16\x5f\x4c\x1a\xd2\xa5\x69\xe1\xbe\xe6\x19\x4e\x3c\xed\x9d\xc0\xe3\xf0\xf5\x0d\x99\x92\xf3\xce\xf4\x2d\xfc\xa9\xdd\xda\x2f\x83\xc9\x1b\x53\x91\x5c\x56\xd2\xcd\x7d\xd5\x99\x7b\x2e\x57\x4f\xdd\xe4\xd7\x7d\x93\xe7\x6e\xf2\x9b\x60\xf2\xad\xe4\x02\xa4\xde\xfd\x4c\xf3\x0a\xe7\xfe\x2b\x98\xbb\x82\xdc\x4f\x93\x29\xf9\xef\x60\xe6\xb9\xd6\x92\x2d\x2a\x0d\x7e\xd9\xb7\xf1\xb2\xce\xfc\xd3\xd0\x3d\xcf\xb3\xec\x32\xa7\x4a\x61\x4c\xe0\xdc\xd3\x78\x71\x34\x77\x1e\xaf\xbb\xa2\x9a\xde\x98\x3c\xfa\xf4\xcb\x78\x55\x30\xf3\x55\xbc\xe6\x46\xef\x72\xa3\xc3\xd7\xf1\x8a\x9a\x1e\xfa\x03\x5d\x54\x2b\x1d\x3a\xe3\xba\x2c\x41\xfe\x70\xfb\xea\x27\x9c\x88\x7c\x21\xf0\x8a\x77\xb9\x66\x79\x86\x53\xdf\x46\x6b\x14\x48\x57\xc5\xe2\xab\x0e\x9d\xf0\xce\xdc\x66\xfc\xb2\xf3\xa7\xd1\x94\xc8\x69\xea\xe3\xe7\xbc\xe5\x82\x68\x3b\xe1\xfc\x97\x1d\xd4\x0e\x4b\x1c\x2b\xfa\x1d\xe7\xfa\xda\x7e\xe9\x38\xff\xba\x65\xfc\xdd\xdd\xf5\x15\xd2\xbf\x99\x04\x67\x8d\x04\xc5\xf3\x0d\xbc\xa5\x7a\x8d\x3c\x43\xc9\xb9\x1e\x11\xa6\xa1\x50\x76\x67\x61\x15\x21\x8d\xf7\x71\x2a\xaa\xbe\x5c\x6d\x81\xa5\x85\x59\x50\x97\x15\x41\x55\xe1\x96\x82\x1e\xa7\xe8\x10\x94\xa1\x66\x86\x7b\xc6\xe6\xf3\x49\x7c\x10\x4a\xd0\xf1\x49\xe8\xcf\x98\x4b\x9a\xe7\x0b\x9a\xde\x0f\xcb\x11\x29\x69\x01\x56\xc3\x4d\x78\x9c\x30\x74\xb6\xa1\x8e\x59\xd6\xb4\xa4\x44\x43\x16\x01\x59\x89\x9a\xac\x04\x92\x31\x8f\x94\xb3\xf6\x07\xa1\xb9\xa9\x05\xea\x74\xe2\x8d\xea\x65\x24\xef\xfd\xb1\x6e\x45\x2c\xc9\xb4\x73\xf2\xb9\xc2\x29\x6b\xd2\x12\x8c\x85\xfd\xc8\x70\x65\x53\xf8\xd0\x65\xc9\x7d\xcd\xad\x44\xc8\xad\x34\x17\xb8\x75\xe9\xca\x9c\x68\x31\xbb\x15\xbc\xe2\xe0\x1a\x6e\x9d\x0f\x32\x93\x1a\x15\xc6\xee\x73\x51\x54\xc9\xfa\xd4\x9d\xb8\xb2\xe0\x22\x19\x11\xcf\xe9\x4b\x85\x8e\xc4\x7a\x51\xea\xdb\x26\x4e\x03\xc7\xd9\x3d\x99\xd7\xba\xc8\x4d\x5e\x62\x59\x9d\xa2\xec\x6b\x0d\x57\x9a\x9a\xa3\x27\xcf\x58\xce\xa5\xe1\xe9\x79\x13\x33\x9c\xc7\xf7\xb1\x8c\x63\x29\xf8\xb6\xd5\x0e\xa7\x30\x8e\x70\xeb\xf4\xa0\xfa\x18\x29\x4c\x85\xd1\x89\x88\xe6\x95\x17\x56\xbe\x35\x3d\x03\xbc\x4c\xc5\xb4\x72\xdc\xf9\xca\x16\xdb\xb4\x47\xb5\x1f\xce\xb2\xf6\x8a\x7f\xc5\x96\xcb\x2b\xdb\x44\xec\x4f\xaf\x19\x5b\x2e\x5b\x99\x15\xf7\x6c\x5a\x67\x19\x2c\x96\x3d\x95\x36\xf9\xa5\x45\x3e\xef\x21\xa7\xd2\x9c\x60\xa6\x07\x3b\x8f\x4f\x04\x7f\x24\xe0\x99\x80\x1a\x8c\x5b\x07\x43\xe7\x3e\xc6\xec\x61\xd5\xf0\xce\x98\xbf\x6b\xa8\x2d\xd3\xe9\x9a\x0c\x91\x3c\x0e\x03\x95\x2a\x88\x53\xee\x45\x73\x9d\xaa\xcd\x6b\x7d\x75\x7d\x69\xab\x5e\x0b\x16\xd6\xfe\xde\x98\xb1\xa8\xd4\x7a\xe8\xd6\x07\xf3\x0b\x09\xf4\x7e\xf2\xa0\x68\x9b\xed\x8f\x57\xe0\xf5\x8d\x55\xe1\xde\x1e\x61\x1f\x4b\x15\x5f\x59\x1c\xa1\x88\x67\xfd\x48\xae\x88\x8a\x97\x46\x3c\xee\x15\x2b\xc0\x1c\xa1\x18\x3e\xe4\xaf\xbf\x48\x40\xea\xec\xa1\x07\xf5\x5e\x81\x76\xde\x7b\xb1\xbb\xce\x86\x27\x54\x88\x93\x40\x2d\x77\x71\x40\x89\xf6\x22\xe0\x2d\xb3\x17\xb9\xb2\x2a\x16\x20\x93\x87\xa4\x78\xa3\x67\x76\xd1\xbc\x83\xdb\xbf\xac\x9d\x37\x1f\x57\xb6\xe7\x65\xef\x8f\x71\xab\xaf\xfb\x3e\x82\x5f\x83\x2d\xfe\x9f\x74\x6c\x20\xe6\x83\x3c\x1b\xac\x3b\xd6\xb5\x09\x15\x22\xf9\x3b\xae\x3d\xff\x78\xae\x3d\x3f\xe0\x5a\xab\x6b\xe8\x81\x0f\xf5\xea\xf9\xbf\xe9\xd5\xf3\x7f\xc8\xab\xd1\x75\xa3\x73\x0c\x59\x6d\xef\xe7\xae\xea\x1a\x6f\x0e\x9c\x2a\xc1\x05\xa5\xc1\x72\xd9\x34\x82\x0c\x1d\xd0\x8b\x14\x5f\x58\x3a\x8a\x8d\x15\x34\x2c\x0f\x1f\xcd\x0f\x29\x79\x08\xdd\xa6\xfa\x96\x80\x83\xc0\xe1\x35\xaa\x8b\x99\xfa\x29\x2c\x0e\x8e\x44\x0c\x2f\x5f\x8f\x21\x5a\x7d\x8f\x57\xd3\xdd\xcd\xe2\x4d\xf4\x89\xc7\xf5\x15\x63\xdf\x19\xea\x27\x5b\x4d\xcf\x7d\x47\x39\xdf\xa1\xfa\xf0\x08\xea\x28\x17\x07\x50\x8c\x7c\x38\x90\xdc\x7d\xb3\x27\x84\x90\x8c\x81\xe4\x43\xf6\xc3\xe3\xe8\x51\x64\xfb\x52\x62\xf0\x83\xa0\xf5\x75\xb7\x8b\x5a\x06\x37\xe1\xa3\x7c\x59\xdf\x90\xbb\x58\x2c\xb8\x3c\x1f\x85\x15\x5c\xaa\xbb\x68\xb4\x99\x1c\xfa\x8c\x70\xc8\xd0\xf0\x2a\xde\xa7\x5f\x33\x5b\x43\x8e\xea\x83\xf1\x10\x78\x70\x97\x7f\x68\x73\x7f\x98\xb6\x41\x07\xa0\x0f\xd0\x4c\xc6\x88\xc7\x2b\xdb\x6e\x21\x34\x02\x3a\xf7\x68\x27\xd1\x45\xe8\xd1\x91\xda\xd3\x84\x78\xc8\x2d\x8f\xc9\x3b\x28\x27\xe8\x64\x34\xf8\xfe\x87\x84\x01\xa1\x4e\x62\x0b\x9e\xed\x30\x39\x5a\x31\x47\x6c\x8d\xbb\xbb\xeb\xab\x7f\xe2\xd4\x0a\xfb\xea\x87\xb6\x88\xeb\xe2\x07\x1e\x0d\x6f\xd7\xee\xa7\x13\xc4\xfd\x4a\xc7\xdd\x8a\x7a\xa1\xc2\x46\x44\xbd\xbe\x73\x6f\xc4\x3b\xd7\x69\xd4\xf9\xb4\x7d\x63\xd7\x79\x7d\x21\xf9\x56\x81\xf4\x3f\xde\xa9\x6f\x99\xbe\x97\xfc\xbb\xe2\xe5\x73\xdf\x90\x6e\xb5\xfe\x13\x37\x99\x34\x6c\x4d\xef\x85\xca\x15\x99\xda\x2e\xb4\xa0\x52\xc1\xb0\xcb\x02\xae\xf9\x7c\x59\x29\xcd\x0b\xdb\xbd\xf0\x72\xdf\xdb\x0b\xed\x05\xe2\xec\xcd\x1a\x7f\x57\x8e\x7e\xd2\x6a\xba\x1d\xfb\x3e\xa3\x9c\x4d\x37\xbb\x32\x3d\x68\xd7\x91\x1a\xd7\x76\xf7\x8b\x49\x6c\xeb\x1e\xb9\xfd\xa5\x96\xca\xd5\x38\x2d\x9a\xfe\x01\x86\x66\xb2\xb2\x29\x24\xb9\x08\x5a\x32\xda\x7c\xb0\x21\xd3\x20\x16\xeb\xa8\xff\xa3\x02\xb9\xb3\xe5\x2c\x97\xc3\x64\x86\x41\xf7\xb9\xff\x01\x33\xcb\xa6\x27\x09\x79\x82\x92\xc7\x08\x71\x6d\x7a\x2d\x27\xf3\xa6\x0c\x35\x7d\x20\x03\xde\xfd\x74\xa6\xd7\x92\x6f\xed\x07\x00\x29\x11\xbc\x0e\x3f\xd3\x0c\xba\x20\x31\xf4\x69\xfc\x81\xa3\xee\xe8\xb5\xbe\x35\x20\xf3\x0c\x57\x09\xc9\xc5\x6b\x5a\x80\xff\x28\xd4\x0a\xfd\x07\xa5\xa7\xbc\x28\x68\x99\x35\xe2\xd1\x87\xae\x69\x32\x19\x0c\xba\xad\x26\xf7\x7b\x18\x6b\xdf\x64\xb0\x3f\xfd\x57\x00\x00\x00\xff\xff\x1c\xfc\x46\x43\x45\x2e\x00\x00")

func assetsExcitonJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsExcitonJs,
		"assets/exciton.js",
	)
}

func assetsExcitonJs() (*asset, error) {
	bytes, err := assetsExcitonJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/exciton.js", size: 11845, mode: os.FileMode(420), modTime: time.Unix(1521499819, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/default.gohtml": assetsDefaultGohtml,
	"assets/exciton.js": assetsExcitonJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"default.gohtml": &bintree{assetsDefaultGohtml, map[string]*bintree{}},
		"exciton.js": &bintree{assetsExcitonJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

