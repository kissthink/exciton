package web

import (
	"time"

	"github.com/jessevdk/go-assets"
)

var _assetsData22d2a248b11d3fc073fe48ee846b045753f35b62 = "<!-- Generated by IcoMoon.io -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<title>error</title>\n<path d=\"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13z\"></path>\n<path d=\"M21 8l-5 5-5-5-3 3 5 5-5 5 3 3 5-5 5 5 3-3-5-5 5-5z\"></path>\n</svg>\n"
var _assetsData67b16a7f0b419a9f7e7cf60118d68cd4fb55175c = "<!-- Generated by IcoMoon.io -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<title>info</title>\n<path d=\"M14 9.5c0-0.825 0.675-1.5 1.5-1.5h1c0.825 0 1.5 0.675 1.5 1.5v1c0 0.825-0.675 1.5-1.5 1.5h-1c-0.825 0-1.5-0.675-1.5-1.5v-1z\"></path>\n<path d=\"M20 24h-8v-2h2v-6h-2v-2h6v8h2z\"></path>\n<path d=\"M16 0c-8.837 0-16 7.163-16 16s7.163 16 16 16 16-7.163 16-16-7.163-16-16-16zM16 29c-7.18 0-13-5.82-13-13s5.82-13 13-13 13 5.82 13 13-5.82 13-13 13z\"></path>\n</svg>\n"
var _assetsDatac16fe42b604e35d48eef2497efd9a481bf67a431 = "/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n\ndialog {\n  position: absolute;\n  left: 0; right: 0;\n  width: -moz-fit-content;\n  width: -webkit-fit-content;\n  width: fit-content;\n  height: -moz-fit-content;\n  height: -webkit-fit-content;\n  height: fit-content;\n  margin: auto;\n  border: solid;\n  padding: 1em;\n  background: white;\n  color: black;\n  display: block;\n}\n\ndialog:not([open]) {\n  display: none;\n}\n\ndialog + .backdrop {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n  background: rgba(0,0,0,0.1);\n}\n\n._dialog_overlay {\n  position: fixed;\n  top: 0; right: 0; bottom: 0; left: 0;\n}\n\ndialog.fixed {\n  position: fixed;\n  top: 50%;\n  transform: translate(0, -50%);\n}\nhtml {\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n}\n\nbody {\n    display: flex;\n    flex-direction: column;\n    margin: 0 0 0 0;\n    padding: 0 0 0 0;\n    width: 100vw;\n    height: 100vh;\n}\n\n#menubar {\n    flex: initial;\n}\n\n#pagecontainer {\n    flex: auto;\n    display: flex;\n}\n\n.page {\n    flex: auto;\n}\n\n/****************************/\n\n/* Navbar container */\n\n.navbar {\n    overflow: hidden;\n    background-color: #333;\n}\n\n/* Links inside the navbar */\n\n.navbar a {\n    float: left;\n    color: white;\n    text-align: center;\n    padding: 14px 16px;\n    text-decoration: none;\n}\n\n/* The dropdown container */\n\n.dropdown {\n    float: left;\n    overflow: hidden;\n}\n\n/* Dropdown button */\n\n.dropdown .dropbtn {\n    border: none;\n    outline: none;\n    color: white;\n    padding: 14px 16px;\n    background-color: inherit;\n    font: inherit;\n    /* Important for vertical align on mobile phones */\n    margin: 0;\n    /* Important for vertical align on mobile phones */\n}\n\n/* Add a red background color to navbar links on hover */\n\n.navbar a:hover,\n.dropdown:hover .dropbtn {\n    background-color: red;\n}\n\n/* Dropdown content (hidden by default) */\n\n.dropdown-content {\n    display: none;\n    position: absolute;\n    background-color: #f9f9f9;\n    width: 100%;\n    left: 0;\n    /*box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.2);*/\n    z-index: 1;\n    /*columns: 3;*/\n    column-width: 240px;\n    column-rule: 1px solid #ccc;\n}\n\n/* Mega Menu header, if needed */\n\n/* Show the dropdown menu on hover */\n\n.dropdown:hover .dropdown-content {\n    display: block;\n    padding: 16px;\n}\n\n/* Create three equal columns that floats next to each other */\n\nli {\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\nul {\n    padding: 0;\n    margin: 0;\n}\n\n.column {\n    margin: 0 0 16px 0;\n}\n\ndd dl.column {\n    margin-left: 8px;\n}\n\n.column dt {\n    font-weight: bold;\n}\n\n.column dd {\n    margin-left: 0;\n    /*padding-left: 0;*/\n}\n\n/* Style links inside the columns */\n\n.column a {\n    float: none;\n    color: black;\n    padding: 8px;\n    text-decoration: none;\n    display: block;\n    text-align: left;\n}\n\nli.menuItem a {\n    float: none;\n    color: black;\n    padding: 8px;\n    text-decoration: none;\n    display: block;\n    text-align: left;\n}\n\nli {\n    break-after: auto;\n    break-inside: avoid-column;\n    break-before: auto;\n}\n\n/* Add a background color on hover */\n\n.column a:hover {\n    background-color: #ddd;\n}\n\n/* Clear floats after the columns */\n\n.row:after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\n/*** dialog */\ndialog {\n    padding: 0;\n    border: 0;\n    border-radius: 0.6rem;\n    box-shadow: 0 0 1em black;\n    min-width: 250px;\n}\n\ndialog[open] {\n    animation: slide-up 0.4s ease-out;\n}\n\ndialog h3 {\n    margin: 0;\n    padding: 0.6em 1em 0.6em 1em;\n    background-color: #333;\n    border-top-left-radius: 0.6rem;\n    border-top-right-radius: 0.6em;\n    border-bottom: 1px solid white;\n    color: white;\n}\n\ndialog div.dialogContent {\n    margin: 0;\n    padding: 0.6em;\n}\n\ndialog footer {\n    border-top: 1px solid #333;\n    margin: 0;\n    padding: 0.64em 1em 0.64em 1em;\n    display: flex;\n}\n\ndialog footer form button {\n    flex: auto;\n}\n\n.dialogContentDetail {\n    font-size: 80%;\n    display: none;\n}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLmNzcy9ub3JtYWxpemUuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaWFsb2ctcG9seWZpbGwvZGlhbG9nLXBvbHlmaWxsLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvd2Vicm9vdC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQixpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUIsWUFBWTtBQUNaLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQztBQUNwQyxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCO0FBQ3RCLDZCQUE2QjtBQUM3QixvQ0FBb0M7QUFDcEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQixZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5QkFBeUI7QUFDekIsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEIsYUFBYTtBQUNiLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0NBQWdDO0FBQ2hDLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCO0FBQzdCLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUNwVkE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMsVUFBVSxXQUFXO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVMsVUFBVSxXQUFXO0FBQzlCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQztBQ3BDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQyIsImZpbGUiOiIuLi9kYXRhL3dlYnJvb3QuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4wIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuXG4vKiBEb2N1bWVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cbiAqL1xuXG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG59XG5cbi8qIFNlY3Rpb25zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5ib2R5IHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gKi9cblxuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXG4gKi9cblxuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xuICBoZWlnaHQ6IDA7IC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnByZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICBmb250LXNpemU6IDFlbTsgLyogMiAqL1xufVxuXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cblxuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICovXG5cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5pbWcge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG59XG5cbi8qIEZvcm1zXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0OyAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICBtYXJnaW46IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAqIDEuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQgeyAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbixcbnNlbGVjdCB7IC8qIDEgKi9cbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqL1xuXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJidXR0b25cIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJzdWJtaXRcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogUmVzdG9yZSB0aGUgZm9jdXMgc3R5bGVzIHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxuICovXG5cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0O1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxubGVnZW5kIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBjb2xvcjogaW5oZXJpdDsgLyogMiAqL1xuICBkaXNwbGF5OiB0YWJsZTsgLyogMSAqL1xuICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cbiAgcGFkZGluZzogMDsgLyogMyAqL1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAxICovXG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5wcm9ncmVzcyB7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDEwKy5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIElFIDEwLlxuICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLlxuICovXG5cblt0eXBlPVwiY2hlY2tib3hcIl0sXG5bdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICovXG5cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgb2RkIGFwcGVhcmFuY2UgaW4gQ2hyb21lIGFuZCBTYWZhcmkuXG4gKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAqL1xuXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4OyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICovXG5cblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gKi9cblxuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbn1cblxuLyogSW50ZXJhY3RpdmVcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxuICovXG5cbmRldGFpbHMge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuXG4vKiBNaXNjXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwKy5cbiAqL1xuXG50ZW1wbGF0ZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAuXG4gKi9cblxuW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuIiwiZGlhbG9nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwOyByaWdodDogMDtcbiAgd2lkdGg6IC1tb3otZml0LWNvbnRlbnQ7XG4gIHdpZHRoOiAtd2Via2l0LWZpdC1jb250ZW50O1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogLW1vei1maXQtY29udGVudDtcbiAgaGVpZ2h0OiAtd2Via2l0LWZpdC1jb250ZW50O1xuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICBtYXJnaW46IGF1dG87XG4gIGJvcmRlcjogc29saWQ7XG4gIHBhZGRpbmc6IDFlbTtcbiAgYmFja2dyb3VuZDogd2hpdGU7XG4gIGNvbG9yOiBibGFjaztcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbmRpYWxvZzpub3QoW29wZW5dKSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbmRpYWxvZyArIC5iYWNrZHJvcCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwOyByaWdodDogMDsgYm90dG9tOiAwOyBsZWZ0OiAwO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDAuMSk7XG59XG5cbi5fZGlhbG9nX292ZXJsYXkge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDsgcmlnaHQ6IDA7IGJvdHRvbTogMDsgbGVmdDogMDtcbn1cblxuZGlhbG9nLmZpeGVkIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDUwJTtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XG59IiwiaHRtbCB7XG4gICAgZm9udC1mYW1pbHk6IHN5c3RlbS11aSwgLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90bywgc2Fucy1zZXJpZjtcbn1cblxuYm9keSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgIG1hcmdpbjogMCAwIDAgMDtcbiAgICBwYWRkaW5nOiAwIDAgMCAwO1xuICAgIHdpZHRoOiAxMDB2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xufVxuXG4jbWVudWJhciB7XG4gICAgZmxleDogaW5pdGlhbDtcbn1cblxuI3BhZ2Vjb250YWluZXIge1xuICAgIGZsZXg6IGF1dG87XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuLnBhZ2Uge1xuICAgIGZsZXg6IGF1dG87XG59XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKiBOYXZiYXIgY29udGFpbmVyICovXG5cbi5uYXZiYXIge1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcbn1cblxuLyogTGlua3MgaW5zaWRlIHRoZSBuYXZiYXIgKi9cblxuLm5hdmJhciBhIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHBhZGRpbmc6IDE0cHggMTZweDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG59XG5cbi8qIFRoZSBkcm9wZG93biBjb250YWluZXIgKi9cblxuLmRyb3Bkb3duIHtcbiAgICBmbG9hdDogbGVmdDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBEcm9wZG93biBidXR0b24gKi9cblxuLmRyb3Bkb3duIC5kcm9wYnRuIHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgcGFkZGluZzogMTRweCAxNnB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGluaGVyaXQ7XG4gICAgZm9udDogaW5oZXJpdDtcbiAgICAvKiBJbXBvcnRhbnQgZm9yIHZlcnRpY2FsIGFsaWduIG9uIG1vYmlsZSBwaG9uZXMgKi9cbiAgICBtYXJnaW46IDA7XG4gICAgLyogSW1wb3J0YW50IGZvciB2ZXJ0aWNhbCBhbGlnbiBvbiBtb2JpbGUgcGhvbmVzICovXG59XG5cbi8qIEFkZCBhIHJlZCBiYWNrZ3JvdW5kIGNvbG9yIHRvIG5hdmJhciBsaW5rcyBvbiBob3ZlciAqL1xuXG4ubmF2YmFyIGE6aG92ZXIsXG4uZHJvcGRvd246aG92ZXIgLmRyb3BidG4ge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuLyogRHJvcGRvd24gY29udGVudCAoaGlkZGVuIGJ5IGRlZmF1bHQpICovXG5cbi5kcm9wZG93bi1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjlmOWY5O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGxlZnQ6IDA7XG4gICAgLypib3gtc2hhZG93OiAwcHggNHB4IDhweCAwcHggcmdiYSgwLCAwLCAwLCAwLjIpOyovXG4gICAgei1pbmRleDogMTtcbiAgICAvKmNvbHVtbnM6IDM7Ki9cbiAgICBjb2x1bW4td2lkdGg6IDI0MHB4O1xuICAgIGNvbHVtbi1ydWxlOiAxcHggc29saWQgI2NjYztcbn1cblxuLyogTWVnYSBNZW51IGhlYWRlciwgaWYgbmVlZGVkICovXG5cbi8qIFNob3cgdGhlIGRyb3Bkb3duIG1lbnUgb24gaG92ZXIgKi9cblxuLmRyb3Bkb3duOmhvdmVyIC5kcm9wZG93bi1jb250ZW50IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwYWRkaW5nOiAxNnB4O1xufVxuXG4vKiBDcmVhdGUgdGhyZWUgZXF1YWwgY29sdW1ucyB0aGF0IGZsb2F0cyBuZXh0IHRvIGVhY2ggb3RoZXIgKi9cblxubGkge1xuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICBwYWRkaW5nOiAwO1xuICAgIG1hcmdpbjogMDtcbn1cblxudWwge1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4uY29sdW1uIHtcbiAgICBtYXJnaW46IDAgMCAxNnB4IDA7XG59XG5cbmRkIGRsLmNvbHVtbiB7XG4gICAgbWFyZ2luLWxlZnQ6IDhweDtcbn1cblxuLmNvbHVtbiBkdCB7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5jb2x1bW4gZGQge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIC8qcGFkZGluZy1sZWZ0OiAwOyovXG59XG5cbi8qIFN0eWxlIGxpbmtzIGluc2lkZSB0aGUgY29sdW1ucyAqL1xuXG4uY29sdW1uIGEge1xuICAgIGZsb2F0OiBub25lO1xuICAgIGNvbG9yOiBibGFjaztcbiAgICBwYWRkaW5nOiA4cHg7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG59XG5cbmxpLm1lbnVJdGVtIGEge1xuICAgIGZsb2F0OiBub25lO1xuICAgIGNvbG9yOiBibGFjaztcbiAgICBwYWRkaW5nOiA4cHg7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG59XG5cbmxpIHtcbiAgICBicmVhay1hZnRlcjogYXV0bztcbiAgICBicmVhay1pbnNpZGU6IGF2b2lkLWNvbHVtbjtcbiAgICBicmVhay1iZWZvcmU6IGF1dG87XG59XG5cbi8qIEFkZCBhIGJhY2tncm91bmQgY29sb3Igb24gaG92ZXIgKi9cblxuLmNvbHVtbiBhOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xufVxuXG4vKiBDbGVhciBmbG9hdHMgYWZ0ZXIgdGhlIGNvbHVtbnMgKi9cblxuLnJvdzphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgICBjbGVhcjogYm90aDtcbn1cblxuLyoqKiBkaWFsb2cgKi9cbmRpYWxvZyB7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogMC42cmVtO1xuICAgIGJveC1zaGFkb3c6IDAgMCAxZW0gYmxhY2s7XG4gICAgbWluLXdpZHRoOiAyNTBweDtcbn1cblxuZGlhbG9nW29wZW5dIHtcbiAgICBhbmltYXRpb246IHNsaWRlLXVwIDAuNHMgZWFzZS1vdXQ7XG59XG5cbmRpYWxvZyBoMyB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDAuNmVtIDFlbSAwLjZlbSAxZW07XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzMzMztcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAwLjZyZW07XG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDAuNmVtO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB3aGl0ZTtcbiAgICBjb2xvcjogd2hpdGU7XG59XG5cbmRpYWxvZyBkaXYuZGlhbG9nQ29udGVudCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDAuNmVtO1xufVxuXG5kaWFsb2cgZm9vdGVyIHtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgIzMzMztcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMC42NGVtIDFlbSAwLjY0ZW0gMWVtO1xuICAgIGRpc3BsYXk6IGZsZXg7XG59XG5cbmRpYWxvZyBmb290ZXIgZm9ybSBidXR0b24ge1xuICAgIGZsZXg6IGF1dG87XG59XG5cbi5kaWFsb2dDb250ZW50RGV0YWlsIHtcbiAgICBmb250LXNpemU6IDgwJTtcbiAgICBkaXNwbGF5OiBub25lO1xufSJdLCJzb3VyY2VSb290IjoiIn0=*/"
var _assetsData0115ca79e54f87ebaca3eef672d910710a7b2459 = "<!DOCTYPE html>\n<html>\n\n<head>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta charset=\"UTF-8\">\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/exciton/web/assets/webroot.css\"></link>\n</head>\n\n<body>\n    <nav id=\"menubar\" class=\"navbar\"></nav>\n    <div id=\"pagecontainer\"></div>\n    <script>window.exciton = { ID: {{.ID}} };</script>\n    <script src=\"/exciton/web/assets/exciton-ws.js\"></script>\n\n    <dialog id=\"fileOpenDialog\">\n        <h3 id=\"fileOpenDialogTitle\"></h3>\n        <div class=\"dialogContent\">\n            <form id=\"fileUploadForm\" enctype=\"multipart/form-data\">\n            <input type=\"file\" id=\"selFile\" name=\"selFile\"></input>\n            <input type=\"hidden\" id=\"openDialogResponceNo\" name=\"openDialogResponceNo\" value=\"0\"></input>\n            </form>\n        </div>\n        <footer>\n        <form method=\"dialog\">\n            <button value=\"ok\" id=\"fileOpenOK\">Upload</button>\n            <button value=\"cancel\">Cancel</button>\n        </form>\n        </footer>\n    </dialog>\n    <dialog id=\"messageBox\">\n    <h3 id=\"messageBoxTitle\"></h3>\n    <div class=\"dialogContent\">\n        <p><img width=\"32\" height=\"32\" id=\"messageBoxIcon\"><span id=\"messageBoxContent\"></span></p>\n        <p id=\"messageBoxDetail\" class=\"dialogContentDetail\"></p>\n    </div>\n    <footer>\n        <form method=\"dialog\" id=\"messageBoxButtons\">\n            <!--input class=\"dialogCloseButton\" type=\"submit\" value=\"Close\"-->\n        </form>\n    </dialog>\n</body>\n\n</html>"
var _assetsData811b89eace18a3615f392e27d8492a6c890bdd96 = "/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./node_modules/dialog-polyfill/dialog-polyfill.js\":\n/*!*********************************************************!*\\\n  !*** ./node_modules/dialog-polyfill/dialog-polyfill.js ***!\n  \\*********************************************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;(function() {\n\n  // nb. This is for IE10 and lower _only_.\n  var supportCustomEvent = window.CustomEvent;\n  if (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n    supportCustomEvent = function CustomEvent(event, x) {\n      x = x || {};\n      var ev = document.createEvent('CustomEvent');\n      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n      return ev;\n    };\n    supportCustomEvent.prototype = window.Event.prototype;\n  }\n\n  /**\n   * @param {Element} el to check for stacking context\n   * @return {boolean} whether this el or its parents creates a stacking context\n   */\n  function createsStackingContext(el) {\n    while (el && el !== document.body) {\n      var s = window.getComputedStyle(el);\n      var invalid = function(k, ok) {\n        return !(s[k] === undefined || s[k] === ok);\n      }\n      if (s.opacity < 1 ||\n          invalid('zIndex', 'auto') ||\n          invalid('transform', 'none') ||\n          invalid('mixBlendMode', 'normal') ||\n          invalid('filter', 'none') ||\n          invalid('perspective', 'none') ||\n          s['isolation'] === 'isolate' ||\n          s.position === 'fixed' ||\n          s.webkitOverflowScrolling === 'touch') {\n        return true;\n      }\n      el = el.parentElement;\n    }\n    return false;\n  }\n\n  /**\n   * Finds the nearest <dialog> from the passed element.\n   *\n   * @param {Element} el to search from\n   * @return {HTMLDialogElement} dialog found\n   */\n  function findNearestDialog(el) {\n    while (el) {\n      if (el.localName === 'dialog') {\n        return /** @type {HTMLDialogElement} */ (el);\n      }\n      el = el.parentElement;\n    }\n    return null;\n  }\n\n  /**\n   * Blur the specified element, as long as it's not the HTML body element.\n   * This works around an IE9/10 bug - blurring the body causes Windows to\n   * blur the whole application.\n   *\n   * @param {Element} el to blur\n   */\n  function safeBlur(el) {\n    if (el && el.blur && el !== document.body) {\n      el.blur();\n    }\n  }\n\n  /**\n   * @param {!NodeList} nodeList to search\n   * @param {Node} node to find\n   * @return {boolean} whether node is inside nodeList\n   */\n  function inNodeList(nodeList, node) {\n    for (var i = 0; i < nodeList.length; ++i) {\n      if (nodeList[i] === node) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {HTMLFormElement} el to check\n   * @return {boolean} whether this form has method=\"dialog\"\n   */\n  function isFormMethodDialog(el) {\n    if (!el || !el.hasAttribute('method')) {\n      return false;\n    }\n    return el.getAttribute('method').toLowerCase() === 'dialog';\n  }\n\n  /**\n   * @param {!HTMLDialogElement} dialog to upgrade\n   * @constructor\n   */\n  function dialogPolyfillInfo(dialog) {\n    this.dialog_ = dialog;\n    this.replacedStyleTop_ = false;\n    this.openAsModal_ = false;\n\n    // Set a11y role. Browsers that support dialog implicitly know this already.\n    if (!dialog.hasAttribute('role')) {\n      dialog.setAttribute('role', 'dialog');\n    }\n\n    dialog.show = this.show.bind(this);\n    dialog.showModal = this.showModal.bind(this);\n    dialog.close = this.close.bind(this);\n\n    if (!('returnValue' in dialog)) {\n      dialog.returnValue = '';\n    }\n\n    if ('MutationObserver' in window) {\n      var mo = new MutationObserver(this.maybeHideModal.bind(this));\n      mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n    } else {\n      // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n      // seem to fire even if the element was removed as part of a parent removal. Use the removed\n      // events to force downgrade (useful if removed/immediately added).\n      var removed = false;\n      var cb = function() {\n        removed ? this.downgradeModal() : this.maybeHideModal();\n        removed = false;\n      }.bind(this);\n      var timeout;\n      var delayModel = function(ev) {\n        if (ev.target !== dialog) { return; }  // not for a child element\n        var cand = 'DOMNodeRemoved';\n        removed |= (ev.type.substr(0, cand.length) === cand);\n        window.clearTimeout(timeout);\n        timeout = window.setTimeout(cb, 0);\n      };\n      ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n        dialog.addEventListener(name, delayModel);\n      });\n    }\n    // Note that the DOM is observed inside DialogManager while any dialog\n    // is being displayed as a modal, to catch modal removal from the DOM.\n\n    Object.defineProperty(dialog, 'open', {\n      set: this.setOpen.bind(this),\n      get: dialog.hasAttribute.bind(dialog, 'open')\n    });\n\n    this.backdrop_ = document.createElement('div');\n    this.backdrop_.className = 'backdrop';\n    this.backdrop_.addEventListener('click', this.backdropClick_.bind(this));\n  }\n\n  dialogPolyfillInfo.prototype = {\n\n    get dialog() {\n      return this.dialog_;\n    },\n\n    /**\n     * Maybe remove this dialog from the modal top layer. This is called when\n     * a modal dialog may no longer be tenable, e.g., when the dialog is no\n     * longer open or is no longer part of the DOM.\n     */\n    maybeHideModal: function() {\n      if (this.dialog_.hasAttribute('open') && document.body.contains(this.dialog_)) { return; }\n      this.downgradeModal();\n    },\n\n    /**\n     * Remove this dialog from the modal top layer, leaving it as a non-modal.\n     */\n    downgradeModal: function() {\n      if (!this.openAsModal_) { return; }\n      this.openAsModal_ = false;\n      this.dialog_.style.zIndex = '';\n\n      // This won't match the native <dialog> exactly because if the user set top on a centered\n      // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n      // possible to polyfill this perfectly.\n      if (this.replacedStyleTop_) {\n        this.dialog_.style.top = '';\n        this.replacedStyleTop_ = false;\n      }\n\n      // Clear the backdrop and remove from the manager.\n      this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n      dialogPolyfill.dm.removeDialog(this);\n    },\n\n    /**\n     * @param {boolean} value whether to open or close this dialog\n     */\n    setOpen: function(value) {\n      if (value) {\n        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n      } else {\n        this.dialog_.removeAttribute('open');\n        this.maybeHideModal();  // nb. redundant with MutationObserver\n      }\n    },\n\n    /**\n     * Handles clicks on the fake .backdrop element, redirecting them as if\n     * they were on the dialog itself.\n     *\n     * @param {!Event} e to redirect\n     */\n    backdropClick_: function(e) {\n      if (!this.dialog_.hasAttribute('tabindex')) {\n        // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n        // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n        // would not be needed - clicks would move the implicit cursor there.\n        var fake = document.createElement('div');\n        this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n        fake.tabIndex = -1;\n        fake.focus();\n        this.dialog_.removeChild(fake);\n      } else {\n        this.dialog_.focus();\n      }\n\n      var redirectedEvent = document.createEvent('MouseEvents');\n      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n      this.dialog_.dispatchEvent(redirectedEvent);\n      e.stopPropagation();\n    },\n\n    /**\n     * Focuses on the first focusable element within the dialog. This will always blur the current\n     * focus, even if nothing within the dialog is found.\n     */\n    focus_: function() {\n      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n      if (!target && this.dialog_.tabIndex >= 0) {\n        target = this.dialog_;\n      }\n      if (!target) {\n        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n        // alternative involves stepping through and trying to focus everything.\n        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n        var query = opts.map(function(el) {\n          return el + ':not([disabled])';\n        });\n        // TODO(samthor): tabindex values that are not numeric are not focusable.\n        query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n        target = this.dialog_.querySelector(query.join(', '));\n      }\n      safeBlur(document.activeElement);\n      target && target.focus();\n    },\n\n    /**\n     * Sets the zIndex for the backdrop and dialog.\n     *\n     * @param {number} dialogZ\n     * @param {number} backdropZ\n     */\n    updateZIndex: function(dialogZ, backdropZ) {\n      if (dialogZ < backdropZ) {\n        throw new Error('dialogZ should never be < backdropZ');\n      }\n      this.dialog_.style.zIndex = dialogZ;\n      this.backdrop_.style.zIndex = backdropZ;\n    },\n\n    /**\n     * Shows the dialog. If the dialog is already open, this does nothing.\n     */\n    show: function() {\n      if (!this.dialog_.open) {\n        this.setOpen(true);\n        this.focus_();\n      }\n    },\n\n    /**\n     * Show this dialog modally.\n     */\n    showModal: function() {\n      if (this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n      }\n      if (!document.body.contains(this.dialog_)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n      }\n      if (!dialogPolyfill.dm.pushDialog(this)) {\n        throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n      }\n\n      if (createsStackingContext(this.dialog_.parentElement)) {\n        console.warn('A dialog is being shown inside a stacking context. ' +\n            'This may cause it to be unusable. For more information, see this link: ' +\n            'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n      }\n\n      this.setOpen(true);\n      this.openAsModal_ = true;\n\n      // Optionally center vertically, relative to the current viewport.\n      if (dialogPolyfill.needsCentering(this.dialog_)) {\n        dialogPolyfill.reposition(this.dialog_);\n        this.replacedStyleTop_ = true;\n      } else {\n        this.replacedStyleTop_ = false;\n      }\n\n      // Insert backdrop.\n      this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n      // Focus on whatever inside the dialog.\n      this.focus_();\n    },\n\n    /**\n     * Closes this HTMLDialogElement. This is optional vs clearing the open\n     * attribute, however this fires a 'close' event.\n     *\n     * @param {string=} opt_returnValue to use as the returnValue\n     */\n    close: function(opt_returnValue) {\n      if (!this.dialog_.hasAttribute('open')) {\n        throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n      }\n      this.setOpen(false);\n\n      // Leave returnValue untouched in case it was set directly on the element\n      if (opt_returnValue !== undefined) {\n        this.dialog_.returnValue = opt_returnValue;\n      }\n\n      // Triggering \"close\" event for any attached listeners on the <dialog>.\n      var closeEvent = new supportCustomEvent('close', {\n        bubbles: false,\n        cancelable: false\n      });\n      this.dialog_.dispatchEvent(closeEvent);\n    }\n\n  };\n\n  var dialogPolyfill = {};\n\n  dialogPolyfill.reposition = function(element) {\n    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n    element.style.top = Math.max(scrollTop, topValue) + 'px';\n  };\n\n  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n    for (var i = 0; i < document.styleSheets.length; ++i) {\n      var styleSheet = document.styleSheets[i];\n      var cssRules = null;\n      // Some browsers throw on cssRules.\n      try {\n        cssRules = styleSheet.cssRules;\n      } catch (e) {}\n      if (!cssRules) { continue; }\n      for (var j = 0; j < cssRules.length; ++j) {\n        var rule = cssRules[j];\n        var selectedNodes = null;\n        // Ignore errors on invalid selector texts.\n        try {\n          selectedNodes = document.querySelectorAll(rule.selectorText);\n        } catch(e) {}\n        if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n          continue;\n        }\n        var cssTop = rule.style.getPropertyValue('top');\n        var cssBottom = rule.style.getPropertyValue('bottom');\n        if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dialogPolyfill.needsCentering = function(dialog) {\n    var computedStyle = window.getComputedStyle(dialog);\n    if (computedStyle.position !== 'absolute') {\n      return false;\n    }\n\n    // We must determine whether the top/bottom specified value is non-auto.  In\n    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n    // Firefox returns the used value. So we do this crazy thing instead: check\n    // the inline style and then go through CSS rules.\n    if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n        (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n      return false;\n    }\n    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n  };\n\n  /**\n   * @param {!Element} element to force upgrade\n   */\n  dialogPolyfill.forceRegisterDialog = function(element) {\n    if (window.HTMLDialogElement || element.showModal) {\n      console.warn('This browser already supports <dialog>, the polyfill ' +\n          'may not work correctly', element);\n    }\n    if (element.localName !== 'dialog') {\n      throw new Error('Failed to register dialog: The element is not a dialog.');\n    }\n    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n  };\n\n  /**\n   * @param {!Element} element to upgrade, if necessary\n   */\n  dialogPolyfill.registerDialog = function(element) {\n    if (!element.showModal) {\n      dialogPolyfill.forceRegisterDialog(element);\n    }\n  };\n\n  /**\n   * @constructor\n   */\n  dialogPolyfill.DialogManager = function() {\n    /** @type {!Array<!dialogPolyfillInfo>} */\n    this.pendingDialogStack = [];\n\n    var checkDOM = this.checkDOM_.bind(this);\n\n    // The overlay is used to simulate how a modal dialog blocks the document.\n    // The blocking dialog is positioned on top of the overlay, and the rest of\n    // the dialogs on the pending dialog stack are positioned below it. In the\n    // actual implementation, the modal dialog stacking is controlled by the\n    // top layer, where z-index has no effect.\n    this.overlay = document.createElement('div');\n    this.overlay.className = '_dialog_overlay';\n    this.overlay.addEventListener('click', function(e) {\n      this.forwardTab_ = undefined;\n      e.stopPropagation();\n      checkDOM([]);  // sanity-check DOM\n    }.bind(this));\n\n    this.handleKey_ = this.handleKey_.bind(this);\n    this.handleFocus_ = this.handleFocus_.bind(this);\n\n    this.zIndexLow_ = 100000;\n    this.zIndexHigh_ = 100000 + 150;\n\n    this.forwardTab_ = undefined;\n\n    if ('MutationObserver' in window) {\n      this.mo_ = new MutationObserver(function(records) {\n        var removed = [];\n        records.forEach(function(rec) {\n          for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n            if (!(c instanceof Element)) {\n              continue;\n            } else if (c.localName === 'dialog') {\n              removed.push(c);\n            }\n            removed = removed.concat(c.querySelectorAll('dialog'));\n          }\n        });\n        removed.length && checkDOM(removed);\n      });\n    }\n  };\n\n  /**\n   * Called on the first modal dialog being shown. Adds the overlay and related\n   * handlers.\n   */\n  dialogPolyfill.DialogManager.prototype.blockDocument = function() {\n    document.documentElement.addEventListener('focus', this.handleFocus_, true);\n    document.addEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n  };\n\n  /**\n   * Called on the first modal dialog being removed, i.e., when no more modal\n   * dialogs are visible.\n   */\n  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n    document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n    document.removeEventListener('keydown', this.handleKey_);\n    this.mo_ && this.mo_.disconnect();\n  };\n\n  /**\n   * Updates the stacking of all known dialogs.\n   */\n  dialogPolyfill.DialogManager.prototype.updateStacking = function() {\n    var zIndex = this.zIndexHigh_;\n\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      dpi.updateZIndex(--zIndex, --zIndex);\n      if (i === 0) {\n        this.overlay.style.zIndex = --zIndex;\n      }\n    }\n\n    // Make the overlay a sibling of the dialog itself.\n    var last = this.pendingDialogStack[0];\n    if (last) {\n      var p = last.dialog.parentNode || document.body;\n      p.appendChild(this.overlay);\n    } else if (this.overlay.parentNode) {\n      this.overlay.parentNode.removeChild(this.overlay);\n    }\n  };\n\n  /**\n   * @param {Element} candidate to check if contained or is the top-most modal dialog\n   * @return {boolean} whether candidate is contained in top dialog\n   */\n  dialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n    while (candidate = findNearestDialog(candidate)) {\n      for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n        if (dpi.dialog === candidate) {\n          return i === 0;  // only valid if top-most\n        }\n      }\n      candidate = candidate.parentElement;\n    }\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n    if (this.containedByTopDialog_(event.target)) { return; }\n\n    event.preventDefault();\n    event.stopPropagation();\n    safeBlur(/** @type {Element} */ (event.target));\n\n    if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n    var dpi = this.pendingDialogStack[0];\n    var dialog = dpi.dialog;\n    var position = dialog.compareDocumentPosition(event.target);\n    if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n      if (this.forwardTab_) {  // forward\n        dpi.focus_();\n      } else {  // backwards\n        document.documentElement.focus();\n      }\n    } else {\n      // TODO: Focus after the dialog, is ignored.\n    }\n\n    return false;\n  };\n\n  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n    this.forwardTab_ = undefined;\n    if (event.keyCode === 27) {\n      event.preventDefault();\n      event.stopPropagation();\n      var cancelEvent = new supportCustomEvent('cancel', {\n        bubbles: false,\n        cancelable: true\n      });\n      var dpi = this.pendingDialogStack[0];\n      if (dpi && dpi.dialog.dispatchEvent(cancelEvent)) {\n        dpi.dialog.close();\n      }\n    } else if (event.keyCode === 9) {\n      this.forwardTab_ = !event.shiftKey;\n    }\n  };\n\n  /**\n   * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n   * removed and immediately readded don't stay modal, they become normal.\n   *\n   * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n   */\n  dialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n    // This operates on a clone because it may cause it to change. Each change also calls\n    // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n    // at a time?!\n    var clone = this.pendingDialogStack.slice();\n    clone.forEach(function(dpi) {\n      if (removed.indexOf(dpi.dialog) !== -1) {\n        dpi.downgradeModal();\n      } else {\n        dpi.maybeHideModal();\n      }\n    });\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   * @return {boolean} whether the dialog was allowed\n   */\n  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n    if (this.pendingDialogStack.length >= allowed) {\n      return false;\n    }\n    if (this.pendingDialogStack.unshift(dpi) === 1) {\n      this.blockDocument();\n    }\n    this.updateStacking();\n    return true;\n  };\n\n  /**\n   * @param {!dialogPolyfillInfo} dpi\n   */\n  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n    var index = this.pendingDialogStack.indexOf(dpi);\n    if (index === -1) { return; }\n\n    this.pendingDialogStack.splice(index, 1);\n    if (this.pendingDialogStack.length === 0) {\n      this.unblockDocument();\n    }\n    this.updateStacking();\n  };\n\n  dialogPolyfill.dm = new dialogPolyfill.DialogManager();\n  dialogPolyfill.formSubmitter = null;\n  dialogPolyfill.useValue = null;\n\n  /**\n   * Installs global handlers, such as click listers and native method overrides. These are needed\n   * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n   */\n  if (window.HTMLDialogElement === undefined) {\n\n    /**\n     * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n     * one that returns the correct value.\n     */\n    var testForm = document.createElement('form');\n    testForm.setAttribute('method', 'dialog');\n    if (testForm.method !== 'dialog') {\n      var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n      if (methodDescriptor) {\n        // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n        // and don't bother to update the element.\n        var realGet = methodDescriptor.get;\n        methodDescriptor.get = function() {\n          if (isFormMethodDialog(this)) {\n            return 'dialog';\n          }\n          return realGet.call(this);\n        };\n        var realSet = methodDescriptor.set;\n        methodDescriptor.set = function(v) {\n          if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n            return this.setAttribute('method', v);\n          }\n          return realSet.call(this, v);\n        };\n        Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n      }\n    }\n\n    /**\n     * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n     * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n     * document.activeElement.\n     */\n    document.addEventListener('click', function(ev) {\n      dialogPolyfill.formSubmitter = null;\n      dialogPolyfill.useValue = null;\n      if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n      var target = /** @type {Element} */ (ev.target);\n      if (!target || !isFormMethodDialog(target.form)) { return; }\n\n      var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n      if (!valid) {\n        if (!(target.localName === 'input' && target.type === 'image')) { return; }\n        // this is a <input type=\"image\">, which can submit forms\n        dialogPolyfill.useValue = ev.offsetX + ',' + ev.offsetY;\n      }\n\n      var dialog = findNearestDialog(target);\n      if (!dialog) { return; }\n\n      dialogPolyfill.formSubmitter = target;\n    }, false);\n\n    /**\n     * Replace the native HTMLFormElement.submit() method, as it won't fire the\n     * submit event and give us a chance to respond.\n     */\n    var nativeFormSubmit = HTMLFormElement.prototype.submit;\n    var replacementFormSubmit = function () {\n      if (!isFormMethodDialog(this)) {\n        return nativeFormSubmit.call(this);\n      }\n      var dialog = findNearestDialog(this);\n      dialog && dialog.close();\n    };\n    HTMLFormElement.prototype.submit = replacementFormSubmit;\n\n    /**\n     * Global form 'dialog' method handler. Closes a dialog correctly on submit\n     * and possibly sets its return value.\n     */\n    document.addEventListener('submit', function(ev) {\n      var form = /** @type {HTMLFormElement} */ (ev.target);\n      if (!isFormMethodDialog(form)) { return; }\n      ev.preventDefault();\n\n      var dialog = findNearestDialog(form);\n      if (!dialog) { return; }\n\n      // Forms can only be submitted via .submit() or a click (?), but anyway: sanity-check that\n      // the submitter is correct before using its value as .returnValue.\n      var s = dialogPolyfill.formSubmitter;\n      if (s && s.form === form) {\n        dialog.close(dialogPolyfill.useValue || s.value);\n      } else {\n        dialog.close();\n      }\n      dialogPolyfill.formSubmitter = null;\n    }, true);\n  }\n\n  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;\n  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;\n\n  if (\"function\" === 'function' && 'amd' in __webpack_require__(/*! !webpack amd define */ \"./node_modules/webpack/buildin/amd-define.js\")) {\n    // AMD support\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() { return dialogPolyfill; }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {\n    // CommonJS support\n    module['exports'] = dialogPolyfill;\n  } else {\n    // all others\n    window['dialogPolyfill'] = dialogPolyfill;\n  }\n})();\n\n\n/***/ }),\n\n/***/ \"./node_modules/webpack/buildin/amd-define.js\":\n/*!***************************************!*\\\n  !*** (webpack)/buildin/amd-define.js ***!\n  \\***************************************/\n/*! no static exports found */\n/***/ (function(module, exports) {\n\nmodule.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n\n\n/***/ }),\n\n/***/ \"./src/exciton-ws.js\":\n/*!***************************!*\\\n  !*** ./src/exciton-ws.js ***!\n  \\***************************/\n/*! no exports provided */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _webroot_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webroot.css */ \"./src/webroot.css\");\n/* harmony import */ var _webroot_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_webroot_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _menu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./menu */ \"./src/menu.js\");\n/* harmony import */ var dialog_polyfill__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! dialog-polyfill */ \"./node_modules/dialog-polyfill/dialog-polyfill.js\");\n/* harmony import */ var dialog_polyfill__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(dialog_polyfill__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\nvar nsobj = window.exciton;\nvar l = window.location;\nvar ws_url = l.protocol == 'https' ? 'wss://' : 'ws://';\nconsole.log(nsobj);\nws_url += l.host + l.pathname + 'exciton/' + nsobj.ID + '/ws';\nconsole.log(ws_url);\nvar sock = new WebSocket(ws_url);\n\nsock.onopen = function () {\n  // send appid for communication\n  nsobj.callNativeMethod('/app/init', null);\n};\n\nsock.onmessage = function (e) {\n  const ed = JSON.parse(e.data);\n  const d = ed.data;\n  const winPrefix = '/exciton/:appid/window/:id/';\n  const menuPrefix = '/exciton/:appid/menu/:id/';\n  const dialogPrefix = '/exciton/:appid/dialog/:id/';\n  console.log(ed);\n\n  if (ed.sync) {\n    if (d.name == winPrefix + 'new') {\n      return nsobj.newWindow(d);\n    }\n\n    if (d.name == menuPrefix + 'new') {\n      return _menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"].newMenu(nsobj, d);\n    }\n\n    if (d.name.startsWith(winPrefix)) {\n      const winevnt = d.name.slice(winPrefix.length);\n      const winid = 'win' + d.parameter['id'];\n      const w = document.getElementById(winid);\n      console.log('call child event: ' + winevnt, d.argument);\n      const resultStr = w.contentWindow.exciton.requestBrowerEventSync(winevnt, JSON.stringify(d.argument));\n      let result;\n\n      if (resultStr) {\n        result = JSON.parse(resultStr);\n      }\n\n      nsobj.responceValue(result, d.respCallbackNo);\n    } else if (d.name.startsWith(menuPrefix)) {\n      const menuevt = d.name.slice(menuPrefix.length);\n\n      switch (menuevt) {\n        case 'updateDiffSetHandler':\n          _menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"].updateDiffSetHandler(nsobj, d);\n          break;\n      }\n    } else if (d.name.startsWith(dialogPrefix)) {\n      const dlgevt = d.name.slice(dialogPrefix.length);\n\n      switch (dlgevt) {\n        case 'showMessageBox':\n          nsobj.showMessageBox(d);\n          break;\n\n        case 'showOpenDialog':\n          nsobj.showOpenDialog(d);\n          break;\n      }\n    } else {\n      throw 'invalid event: ' + d.name;\n    }\n  } else {\n    if (d.name.startsWith(winPrefix)) {\n      const winevnt = d.name.slice(winPrefix.length);\n      const winid = 'win' + d.parameter['id'];\n      const w = document.getElementById(winid);\n      console.log('call child event: ' + winevnt, d.argument);\n      w.contentWindow.exciton.requestBrowserEvent(winevnt, JSON.stringify(d.argument));\n    } else if (d.name.startsWith(menuPrefix)) {\n      const menuevt = d.name.slice(menuPrefix.length);\n\n      switch (menuevt) {\n        case 'setApplicationMenu':\n          _menu__WEBPACK_IMPORTED_MODULE_1__[\"default\"].setApplicationMenu(nsobj, d);\n          break;\n\n        default:\n          throw 'invalid menu event:' + menuevt;\n      }\n    } else {\n      throw 'invalid event: ' + d.name;\n    }\n  }\n};\n\nnsobj.newWindow = function (dd) {\n  console.log('window/new', dd);\n  const iframe = document.createElement('iframe');\n  iframe.classList.add('page');\n  iframe.setAttribute('title', dd.argument.title);\n  iframe.setAttribute('src', dd.argument.url);\n  iframe.setAttribute('frameborder', 0);\n  iframe.id = 'win' + dd.parameter['id'];\n  const p = document.getElementById('pagecontainer');\n\n  while (p.firstChild) {\n    //or hide children?\n    p.removeChild(p.firstChild);\n  }\n\n  p.appendChild(iframe);\n  nsobj.responceValue(true, dd.respCallbackNo);\n};\n\nnsobj.callWindowMethod = function (d) {\n  console.log('callWindowMethod', d);\n  nsobj.callNativeMethod(d.path, JSON.parse(d.arg));\n};\n\nnsobj.responceValue = function (val, respNo) {\n  var data = {\n    name: '/responceEventResult',\n    argument: val,\n    //TODO: error result\n    respCallbackNo: respNo\n  };\n  console.log('responceValue', data);\n  nsobj.callnative(data);\n};\n\nnsobj.callNativeMethod = function (method, arg) {\n  var data = {\n    name: '/exciton/' + nsobj.ID + method,\n    argument: arg,\n    respCallbackNo: -1\n  };\n  nsobj.callnative(data);\n};\n\nnsobj.callnative = function (data) {\n  sock.send(JSON.stringify(data));\n};\n\nnsobj.showAboutDialog = function () {\n  //TODO: app icon\n  nsobj.showMessageBoxCore('', 'About...', 'TODO: App name', '', ['OK'], 0, null);\n};\n\nlet mesasgeBoxRegisterd = false;\n\nnsobj.showMessageBoxCore = function (iconSrc, title, message, detail, buttons, defaultId, respCallback) {\n  const dlg = document.getElementById('messageBox');\n  const icon = document.getElementById('messageBoxIcon');\n  icon.src = iconSrc;\n  icon.style.display = iconSrc === '' ? 'none' : 'inline';\n  document.getElementById('messageBoxTitle').innerText = title;\n  document.getElementById('messageBoxContent').innerText = message;\n  const detailElem = document.getElementById('messageBoxDetail');\n  detailElem.innerText = detail;\n  detailElem.style.display = detail === '' ? 'none' : 'block';\n  const buttonBase = document.getElementById('messageBoxButtons');\n\n  while (buttonBase.firstChild) {\n    buttonBase.removeChild(buttonBase.firstChild);\n  }\n\n  for (let i = 0; i < buttons.length; i++) {\n    const b = document.createElement('button');\n    b.type = 'submit';\n    b.value = i;\n    b.innerText = buttons[i];\n    b.autofocus = i == defaultId;\n    buttonBase.appendChild(b);\n  }\n\n  if (!mesasgeBoxRegisterd) {\n    dialog_polyfill__WEBPACK_IMPORTED_MODULE_2___default.a.registerDialog(dlg);\n    mesasgeBoxRegisterd = true;\n  }\n\n  if (respCallback) {\n    dlg.addEventListener('close', e => {\n      respCallback(e, parseInt(dlg.returnValue));\n    }, {\n      once: true\n    });\n  }\n\n  dlg.showModal();\n};\n\nnsobj.showMessageBox = function (dd) {\n  console.log('window/new', dd);\n  let iconSrc = '';\n  const type = dd.argument['type'];\n\n  switch (type) {\n    case 0:\n      // none\n      break;\n\n    case 1:\n      // info\n      iconSrc = '/exciton/web/assets/info.svg';\n      break;\n\n    case 2:\n      // warning\n      iconSrc = '/exciton/web/assets/warning.svg';\n      break;\n\n    case 3:\n      // error\n      iconSrc = '/exciton/web/assets/error.svg';\n      break;\n\n    case 4:\n      // question\n      iconSrc = '/exciton/web/assets/question.svg';\n      break;\n\n    default:\n      console.warn('invalid icon type: ' + type);\n      break;\n  }\n\n  let buttons = dd.argument['buttons'];\n  let defaultId = dd.argument['defaultId'];\n\n  if (buttons.length == 0) {\n    if (type == 4\n    /*question*/\n    ) {\n        buttons = ['YES', 'NO'];\n        defaultId = 1;\n      } else {\n      buttons = ['OK'];\n      defaultId = 0;\n    }\n  }\n\n  const title = dd.argument['title'];\n  const message = dd.argument['message'];\n  const detail = dd.argument['detail'];\n  const ret = nsobj.showMessageBoxCore(iconSrc, title, message, detail, buttons, defaultId, (e, returnValue) => {\n    nsobj.responceValue(returnValue, dd.respCallbackNo);\n  });\n};\n\nlet fileOpenDialogRegisterd = false;\n\nnsobj.showOpenDialog = function (dd) {\n  const dlg = document.getElementById('fileOpenDialog');\n  const title = dd.argument['title'] ? dd.argument['title'] : \"Open File\";\n  document.getElementById('fileOpenDialogTitle').innerText = title;\n  const buttonLabel = dd.argument['buttonLabel'] ? dd.argument['buttonLabel'] : \"OK\";\n  document.getElementById('fileOpenOK').innerText = buttonLabel;\n  let accept = null;\n\n  if (dd.argument['filters']) {\n    let exts = [];\n\n    for (let filter of dd.argument['filters']) {\n      for (let ext of filter['extensions']) {\n        exts.push(ext);\n      }\n    }\n\n    accept = exts.join(' ');\n  }\n\n  const infile = document.getElementById('selFile');\n\n  if (accept) {\n    infile.setAttribute('accept', accept);\n  } else {\n    infile.removeAttribute('accept');\n  }\n\n  const prop = dd.argument['properties'];\n  infile.multiple = (prop & 4) != 0;\n\n  if (!fileOpenDialogRegisterd) {\n    dialog_polyfill__WEBPACK_IMPORTED_MODULE_2___default.a.registerDialog(dlg);\n    fileOpenDialogRegisterd = true;\n    dlg.addEventListener('close', e => {\n      if (dlg.returnValue === 'ok') {\n        const form = document.getElementById('fileUploadForm');\n        document.getElementById('openDialogResponceNo').value = dd.respCallbackNo;\n        const XHR = new XMLHttpRequest();\n        const FD = new FormData(form);\n        XHR.open('POST', '/webFileOpenDialog');\n        XHR.send(FD); //TODO: error\n      } else {\n        console.log('file open'); //TODO: cancel proc\n      }\n    });\n  }\n\n  dlg.showModal();\n};\n\n/***/ }),\n\n/***/ \"./src/menu.js\":\n/*!*********************!*\\\n  !*** ./src/menu.js ***!\n  \\*********************/\n/*! exports provided: default */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n\nconst ExcitonEventData = 'exciton-event-data';\nconst ExcitonComponentID = 'exciton-component-id';\nconst ditNone = 0;\nconst ditCreateNode = 1;\nconst ditCreateNodeWithNS = 2;\nconst ditCreateTextNode = 3;\nconst ditSelectCurNode = 4;\nconst ditSelectArg1Node = 5;\nconst ditSelectArg2Node = 6;\nconst ditPropertyValue = 7;\nconst ditDelProperty = 8;\nconst ditAttributeValue = 9;\nconst ditDelAttributeValue = 10;\nconst ditAddClassList = 11;\nconst ditDelClassList = 12;\nconst ditAddDataSet = 13;\nconst ditDelDataSet = 14;\nconst ditAddStyle = 15;\nconst ditDelStyle = 16;\nconst ditNodeValue = 17;\nconst ditInnerHTML = 18;\nconst ditAppendChild = 19;\nconst ditInsertBefore = 20;\nconst ditRemoveChild = 21;\nconst ditReplaceNode = 22;\nconst ditAddEventListener = 23;\nconst ditRemoveEventListener = 24;\nconst ditSetRootItem = 25;\nconst ditNodeUUID = 26;\nconst ditAddClientEvent = 27;\nconst ditMountComponent = 28;\nconst ditUnmountComponent = 29;\nconst ditAttributeValueNS = 30;\nconst ditDelAttributeValueNS = 31;\n\nfunction resolveMenuNode(menu, items) {\n  let ret;\n\n  for (let idx of items) {\n    if (ret) {\n      ret = ret.subMenu.itemAtIndex(idx);\n    } else {\n      ret = menu.itemAtIndex(idx);\n    }\n  }\n\n  return ret;\n}\n\nclass Menu {\n  constructor() {\n    this.id = null;\n    this.items = [];\n    this.hostItem = null;\n    this.title = \"\";\n  }\n\n  addMenuItem(item) {\n    this.items.push(item);\n  }\n\n  getSubMenu(idx) {\n    if (idx < this.items.length) {\n      const item = this.items[idx];\n\n      if (item.subMenu) {\n        return item.subMenu;\n      }\n    }\n\n    return null;\n  }\n\n  itemAtIndex(idx) {\n    if (idx < this.items.length) {\n      return this.items[idx];\n    }\n\n    return null;\n  }\n\n  getNodeAtIndex(idx) {\n    const item = this.itemAtIndex(idx);\n\n    if (!item) {\n      return null;\n    }\n\n    if (!item.subMenu) {\n      return null;\n    }\n\n    return item.subMenu.getNode();\n  }\n\n  getNode() {\n    if (!this.items || this.items.length == 0) {\n      return null;\n    }\n\n    const menu = document.createElement('ul');\n\n    for (let item of this.items) {\n      let mi;\n\n      if (item.separator) {\n        if (menu.lastChild) {\n          menu.lastChild.style.marginBottom = '10px';\n        } //mi = document.createElement('hr');\n\n      } else if (item.subMenu) {\n        const sm = item.subMenu.getNode();\n\n        if (sm) {\n          mi = document.createElement('dl');\n          mi.classList.add('column');\n          const t = document.createTextNode(item.title);\n          const dt = document.createElement('dt');\n          dt.appendChild(t);\n          mi.appendChild(dt);\n          const dd = document.createElement('dd');\n          dd.appendChild(sm);\n          mi.appendChild(dd);\n          dd.style.display = 'none';\n        }\n      } else {\n        if (item.title !== '') {\n          const ma = document.createElement('a');\n          const mt = document.createTextNode(item.title);\n\n          if (item.enabled && item.handler) {\n            ma.onclick = item.handler;\n            ma.setAttribute('href', '#');\n          }\n\n          ma.appendChild(mt); //mi.appendChild(ma);\n\n          mi = ma;\n        }\n      }\n\n      if (mi) {\n        const li = document.createElement('li');\n        li.classList.add('menuItem');\n        li.appendChild(mi);\n        menu.appendChild(li);\n      }\n    }\n\n    return menu;\n  }\n\n}\n\n;\n\nfunction roleCmdAbout(nsobj, e) {\n  nsobj.showAboutDialog();\n}\n\nfunction roleCmdCut(nsobj, e) {}\n\nfunction roleCmdCopy(nsobj, e) {}\n\nfunction roleCmdPaste(nsobj, e) {}\n\nfunction roleCmdDelete(nsobj, e) {}\n\nfunction roleCmdSelectAll(nsobj, e) {}\n\nfunction roleCmdZoom(nsobj, e) {}\n\nfunction roleCmdClose(nsobj, e) {}\n\nfunction roleCmdQuit(nsobj, e) {}\n\nfunction roleCmdToggleFullscreen(nsobj, e) {}\n\nfunction roleCmdHistoryBack(nsobj, e) {}\n\nfunction roleCmdHistoryForward(nsobj, e) {}\n\nconst defaultRoleInfo = {\n  'about': {\n    command: roleCmdAbout,\n    label: 'About...'\n  },\n  'front': {\n    command: null,\n    label: 'Bring All to Front'\n  },\n  'cut': {\n    command: roleCmdCut,\n    label: 'Cut'\n  },\n  'copy': {\n    command: roleCmdCopy,\n    label: 'Copy'\n  },\n  'paste': {\n    command: roleCmdPaste,\n    label: 'Paste'\n  },\n  'delete': {\n    command: roleCmdDelete,\n    label: 'Delete'\n  },\n  'selectall': {\n    command: roleCmdSelectAll,\n    label: 'Select All'\n  },\n  'minimize': {\n    command: null,\n    label: 'Minimize'\n  },\n  // 'close': {\n  //   command: roleCmdClose,\n  //   label: 'Close Window'\n  // },\n  'zoom': {\n    command: roleCmdZoom,\n    label: 'Zoom'\n  },\n  // 'quit': {\n  //   command: roleCmdQuit,\n  //   label: 'Quit'\n  // },\n  'togglefullscreen': {\n    command: roleCmdToggleFullscreen,\n    label: 'Toggle Full Screen'\n  },\n  'viewsource': {\n    command: null,\n    label: 'View Source'\n  },\n  'back': {\n    command: roleCmdHistoryBack,\n    label: 'Back'\n  },\n  'forward': {\n    command: roleCmdHistoryForward,\n    label: 'Forward'\n  }\n};\n\nfunction translateEvent(nsobj, e, id, menuData) {\n  const eventProps = [// Event\n  'bubbles', 'cancelBubble', 'cancelable', 'composed', //'@currentTarget',\n  'defaultPrevented', 'eventPhase', // '@target', \n  'timeStamp', 'type', 'isTrusted', // UIEvent\n  'detail', //'@view',\n  // MouseEvent\n  'altKey', 'button', 'buttons', 'clientX', 'clientY', 'ctrlKey', 'metaKey', 'movementX', 'movementY', 'region', '@relatedTarget', 'screenX', 'screenY', 'shiftKey'];\n  const ee = {};\n\n  for (let pn of eventProps) {\n    const p = e[pn];\n\n    if (p) {\n      ee[pn] = p;\n    }\n  } // target\n\n\n  const target = {\n    'menuId': menuData.id,\n    'elementId': id,\n    'appId': nsobj.ID\n  };\n  ee['currentTarget'] = target;\n  ee['target'] = target;\n  return ee;\n}\n\nclass MenuData {\n  constructor() {\n    this.menu = null;\n    this.id = \"\";\n  }\n\n  getAppMenuNode(bar) {\n    for (let item of this.menu.items) {\n      const dd = document.createElement('div');\n      dd.classList.add('dropdown');\n      const btn = document.createElement('button');\n      btn.classList.add('dropbtn');\n      btn.appendChild(document.createTextNode(item.title));\n      dd.appendChild(btn);\n\n      if (item.subMenu) {\n        const sm = item.subMenu.getNode();\n\n        if (sm) {\n          const mc = document.createElement('div');\n          mc.classList.add('dropdown-content');\n          mc.appendChild(sm);\n          dd.appendChild(mc);\n        }\n      }\n\n      bar.appendChild(dd);\n    }\n\n    return bar;\n  }\n\n  getPopupMenuNode() {\n    const popup = document.createElement('div');\n    popup.classList.add('popupMenu');\n    popup.appendChild(this.menu.getNode());\n    return popup;\n  }\n\n  polulateWithDiffset(nsobj, diffSet) {\n    const items = diffSet.items;\n    const creNodes = [];\n    let curNode;\n    let arg1Node;\n    let arg2Node;\n    console.log('DiffSet:', JSON.stringify(items));\n\n    for (let item of items) {\n      const key = item.t;\n      const k = item.k;\n      const v = item.v;\n\n      switch (key) {\n        case ditCreateNode:\n          if (v === 'menu') {\n            const menu = new Menu();\n\n            if (creNodes.length > 0 || this.menu) {\n              const mi = new MenuItem();\n              mi.setSubMenu(menu);\n              curNode = mi;\n              creNodes.push(mi);\n            } else {\n              curNode = menu;\n              creNodes.push(menu);\n              this.menu = menu;\n              this.menu.id = this.id;\n            }\n          } else if (v === 'menuitem') {\n            const mi = new MenuItem();\n            creNodes.push(mi);\n            curNode = mi;\n          } else if (v === 'hr') {\n            const mi = new MenuItem();\n            mi.separator = true;\n            creNodes.push(mi);\n            curNode = mi;\n          } else {\n            throw 'unsupported tag: ' + v;\n          }\n\n          break;\n\n        case ditSelectCurNode:\n          if (!v) {\n            curNode = this.menu;\n          } else if (typeof v === 'number') {\n            curNode = creNodes[v];\n          } else {\n            curNode = resolveMenuNode(this.menu, v);\n          }\n\n          break;\n\n        case ditSelectArg1Node:\n          if (!v) {\n            arg1Node = this.menu;\n          } else if (typeof v === 'number') {\n            arg1Node = creNodes[v];\n          } else {\n            arg1Node = resolveMenuNode(this.menu, v);\n          }\n\n          break;\n\n        case ditSelectArg2Node:\n          if (!v) {\n            arg2Node = this.menu;\n          } else if (typeof v === 'number') {\n            arg2Node = creNodes[v];\n          } else {\n            arg2Node = resolveMenuNode(this.menu, v);\n          }\n\n          break;\n\n        case ditAttributeValue:\n          if (!(curNode instanceof MenuItem)) {\n            if (k !== 'type') {\n              throw 'invalid attribute: ' + k + '/' + v;\n            }\n          } else {\n            const mi = curNode;\n\n            if (k === 'label') {\n              mi.title = v;\n\n              if (mi.subMenu) {\n                mi.subMenu.title = v;\n              }\n            }\n          }\n\n          break;\n\n        case ditDelAttributeValue:\n          console.log('ditDelAttributeValue');\n          break;\n\n        case ditAddDataSet:\n          if (!curNode || !(curNode instanceof MenuItem)) {\n            throw 'invalid target: ' + curNode;\n          } else {\n            const mi = curNode;\n\n            if (k === 'menuRole') {\n              const role = defaultRoleInfo[v];\n\n              if (!role) {\n                console.warn('unsupported role name:', v);\n                break;\n              }\n\n              if (role.label) {\n                mi.title = role.label;\n\n                if (mi.subMenu) {\n                  mi.subMenu.title = role.label;\n                }\n              }\n\n              mi.handler = e => {\n                e.preventDefault();\n                e.stopPropagation();\n                role.command(nsobj, e);\n              };\n\n              mi.enabled = true;\n            } else if (k == 'menuAcclerator') {\n              console.log('menuAcclerator not implement yet.');\n            } else {\n              console.warn('unknown dataset name:', k);\n            }\n          }\n\n          break;\n\n        case ditDelDataSet:\n          console.warn('ditDelDataSet: not implement yet.');\n          break;\n\n        case ditAppendChild:\n          {\n            let target;\n\n            if (!curNode) {\n              target = this.menu;\n            } else if (curNode instanceof Menu) {\n              target = curNode;\n            } else if (curNode instanceof MenuItem) {\n              target = curNode.subMenu;\n            }\n\n            if (!target) {\n              throw 'ditAppendChild: invalid arg: ' + curNode;\n            }\n\n            if (!(arg1Node instanceof MenuItem)) {\n              if (arg1Node != target) {\n                throw 'ditAppendChild: invalid arg1: ' + arg1Node;\n              }\n            } else {\n              target.addMenuItem(arg1Node);\n            }\n          }\n          break;\n\n        case ditInsertBefore:\n          console.warn('ditInsertBefore: not implement yet.');\n          break;\n\n        case ditRemoveChild:\n          console.warn('ditRemoveChild: not implement yet.');\n          break;\n\n        case ditAddEventListener:\n          if (!(curNode instanceof MenuItem)) {\n            throw 'ditAddEventListener: invalid target: ' + curNode;\n          }\n\n          if (k !== 'click') {\n            throw 'ditAddEventListener: unsupported event';\n          } else {\n            const mi = curNode;\n            const id = v['id'];\n\n            mi.handler = e => {\n              e.preventDefault();\n              e.stopPropagation();\n              const ee = translateEvent(nsobj, e, id, this.menu);\n              console.log('fakeEvent ==> ', ee);\n              nsobj.callNativeMethod('/menu/' + this.menu.id + '/html/' + id + '/click', ee);\n            };\n\n            mi.enabled = true;\n          }\n\n          break;\n\n        case ditRemoveEventListener:\n          console.warn('ditRemoveEventListener: not implement yet.');\n          break;\n\n        case ditNodeUUID:\n          {\n            const id = v;\n\n            if (curNode instanceof Menu) {\n              if (curNode != this.menu) {\n                curNode.id = id;\n\n                if (curNode.hostItem) {\n                  curNode.hostItem.id = id;\n                }\n              }\n            } else if (curNode instanceof MenuItem) {\n              curNode.id = id;\n            } else {\n              throw 'node is invalid';\n            }\n          }\n          break;\n\n        case ditAddClassList:\n          break;\n\n        case ditDelClassList:\n          break;\n\n        case ditMountComponent:\n          break;\n\n        case ditUnmountComponent:\n          break;\n\n        default:\n          throw 'Unsupported diff type:' + key;\n      }\n    }\n  }\n\n}\n\n;\n\nclass MenuItem {\n  constructor() {\n    this.id = \"\";\n    this.subMenu = null;\n    this.title = \"\";\n    this.cmdId = -1;\n    this.enabled = false;\n    this.separator = false;\n    this.handler = null;\n  }\n\n  setSubMenu(menu) {\n    this.subMenu = menu;\n    menu.hostItem = this;\n    this.enabled = true;\n  }\n\n}\n\n;\nconst menuDatas = {};\n\nfunction newMenu(nsobj, dd) {\n  const params = dd.parameter;\n  const id = params['id'];\n\n  if (!id) {\n    throw 'parameter[id] not found';\n  }\n\n  const menuData = new MenuData();\n  menuData.id = id;\n  menuDatas[id] = menuData;\n  nsobj.responceValue(true, dd.respCallbackNo);\n}\n\nfunction updateDiffSetHandler(nsobj, dd) {\n  const params = dd.parameter;\n  const argument = dd.argument;\n  const id = params['id'];\n\n  if (!id) {\n    throw 'parameter[id] not found';\n  }\n\n  const menuData = menuDatas[id];\n\n  if (!menuData) {\n    throw 'invalid id';\n  }\n\n  menuData.polulateWithDiffset(nsobj, argument);\n  nsobj.responceValue(true, dd.respCallbackNo);\n}\n\nfunction getMenuData(params) {\n  const id = params['id'];\n\n  if (!id) {\n    throw 'parameter[id] not found';\n  }\n\n  const menuData = menuDatas[id];\n\n  if (!menuData) {\n    throw 'invalid id';\n  }\n\n  return menuData;\n}\n\nfunction setApplicationMenu(nsobj, dd) {\n  const params = dd.parameter;\n  const menuData = getMenuData(params);\n  const menuBar = document.getElementById('menubar');\n\n  while (menuBar.firstChild) {\n    menuBar.removeChild(menuBar.firstChild);\n  }\n\n  menuData.getAppMenuNode(menuBar);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  newMenu,\n  updateDiffSetHandler,\n  setApplicationMenu,\n  getMenuData\n});\n\n/***/ }),\n\n/***/ \"./src/webroot.css\":\n/*!*************************!*\\\n  !*** ./src/webroot.css ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// extracted by mini-css-extract-plugin\n\n/***/ }),\n\n/***/ 0:\n/*!*********************************!*\\\n  !*** multi ./src/exciton-ws.js ***!\n  \\*********************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(/*! ./src/exciton-ws.js */\"./src/exciton-ws.js\");\n\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"
var _assetsData4029148de0a3b24c533ab030ac54e17cbacc31b7 = "<!-- Generated by IcoMoon.io -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<title>question</title>\n<path d=\"M14 22h4v4h-4zM22 8c1.105 0 2 0.895 2 2v6l-6 4h-4v-2l6-4v-2h-10v-4h12zM16 3c-3.472 0-6.737 1.352-9.192 3.808s-3.808 5.72-3.808 9.192c0 3.472 1.352 6.737 3.808 9.192s5.72 3.808 9.192 3.808c3.472 0 6.737-1.352 9.192-3.808s3.808-5.72 3.808-9.192c0-3.472-1.352-6.737-3.808-9.192s-5.72-3.808-9.192-3.808zM16 0v0c8.837 0 16 7.163 16 16s-7.163 16-16 16c-8.837 0-16-7.163-16-16s7.163-16 16-16z\"></path>\n</svg>\n"
var _assetsDataaef3c0e72af327412e4a31eb57713d72a7622b08 = "<!-- Generated by IcoMoon.io -->\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\">\n<title>warning</title>\n<path d=\"M16 2.899l13.409 26.726h-26.819l13.409-26.726zM16 0c-0.69 0-1.379 0.465-1.903 1.395l-13.659 27.222c-1.046 1.86-0.156 3.383 1.978 3.383h27.166c2.134 0 3.025-1.522 1.978-3.383h0l-13.659-27.222c-0.523-0.93-1.213-1.395-1.903-1.395v0z\"></path>\n<path d=\"M18 26c0 1.105-0.895 2-2 2s-2-0.895-2-2c0-1.105 0.895-2 2-2s2 0.895 2 2z\"></path>\n<path d=\"M16 22c-1.105 0-2-0.895-2-2v-6c0-1.105 0.895-2 2-2s2 0.895 2 2v6c0 1.105-0.895 2-2 2z\"></path>\n</svg>\n"

// assetsData returns go-assets FileSystem
var assetsData = assets.NewFileSystem(map[string][]string{"/": []string{"error.svg", "exciton-ws.js", "info.svg", "question.svg", "warning.svg", "webroot.css", "webroot.gohtml"}}, map[string]*assets.File{
	"/": &assets.File{
		Path:     "/",
		FileMode: 0x800001ed,
		Mtime:    time.Unix(1533898704, 1533898704000000000),
		Data:     nil,
	}, "/exciton-ws.js": &assets.File{
		Path:     "/exciton-ws.js",
		FileMode: 0x1a4,
		Mtime:    time.Unix(1535183965, 1535183965000000000),
		Data:     []byte(_assetsData811b89eace18a3615f392e27d8492a6c890bdd96),
	}, "/question.svg": &assets.File{
		Path:     "/question.svg",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1533560732, 1533560732000000000),
		Data:     []byte(_assetsData4029148de0a3b24c533ab030ac54e17cbacc31b7),
	}, "/warning.svg": &assets.File{
		Path:     "/warning.svg",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1533560732, 1533560732000000000),
		Data:     []byte(_assetsDataaef3c0e72af327412e4a31eb57713d72a7622b08),
	}, "/error.svg": &assets.File{
		Path:     "/error.svg",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1533560732, 1533560732000000000),
		Data:     []byte(_assetsData22d2a248b11d3fc073fe48ee846b045753f35b62),
	}, "/info.svg": &assets.File{
		Path:     "/info.svg",
		FileMode: 0x1ed,
		Mtime:    time.Unix(1533560732, 1533560732000000000),
		Data:     []byte(_assetsData67b16a7f0b419a9f7e7cf60118d68cd4fb55175c),
	}, "/webroot.css": &assets.File{
		Path:     "/webroot.css",
		FileMode: 0x1a4,
		Mtime:    time.Unix(1535183965, 1535183965000000000),
		Data:     []byte(_assetsDatac16fe42b604e35d48eef2497efd9a481bf67a431),
	}, "/webroot.gohtml": &assets.File{
		Path:     "/webroot.gohtml",
		FileMode: 0x1a4,
		Mtime:    time.Unix(1533684338, 1533684338000000000),
		Data:     []byte(_assetsData0115ca79e54f87ebaca3eef672d910710a7b2459),
	}}, "")
